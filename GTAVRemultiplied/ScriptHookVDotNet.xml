<doc>
  <assembly>ScriptHookVDotNet</assembly>
  <members>
    <member name="M:GTA.Native.Function.Call``1(&lt;unknown type&gt;,GTA.Native.InputArgument[])">
      <summary>
Calls the specified native script function and returns its return value.
</summary>
      <param name="hash">The hashed name of the native script function.</param>
      <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
      <returns>The return value of the native</returns>
    </member>
    <member name="M:GTA.Native.Function.Call(&lt;unknown type&gt;,GTA.Native.InputArgument[])">
      <summary>
Calls the specified native script function and ignores its return value.
</summary>
      <param name="hash">The hashed name of the script function.</param>
      <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
    </member>
    <member name="M:GTA.Native.GlobalVariable.Get(System.Int32)">
      <summary>
Gets the global variable at the specified index.
</summary>
      <param name="index">The index of the global variable.</param>
      <returns>A <see cref="T:GTA.Native.GlobalVariable" /> instance representing the global variable.</returns>
    </member>
    <member name="P:GTA.Native.GlobalVariable.MemoryAddress">
      <summary>
Gets the native memory address of the <see cref="T:GTA.Native.GlobalVariable" />.
</summary>
    </member>
    <member name="M:GTA.Native.GlobalVariable.Read``1">
      <summary>
Gets the value stored in the <see cref="T:GTA.Native.GlobalVariable" />.
</summary>
    </member>
    <member name="M:GTA.Native.GlobalVariable.Write``1(``0)">
      <summary>
Set the value stored in the <see cref="T:GTA.Native.GlobalVariable" />.
</summary>
      <param name="value">The new value to assign to the <see cref="T:GTA.Native.GlobalVariable" />.</param>
    </member>
    <member name="M:GTA.Native.GlobalVariable.WriteString(System.String,System.Int32)">
      <summary>
Set the value stored in the <see cref="T:GTA.Native.GlobalVariable" /> to a string.
</summary>
      <param name="value">The string to set the <see cref="T:GTA.Native.GlobalVariable" /> to.</param>
      <param name="maxSize">The maximum size of the string. Can be found for a given global variable by checking the decompiled scripts from the game.</param>
    </member>
    <member name="M:GTA.Native.GlobalVariable.GetStructField(System.Int32)">
      <summary>
Gets the <see cref="T:GTA.Native.GlobalVariable" /> stored at a given offset in a global structure.
</summary>
      <param name="index">The index the <see cref="T:GTA.Native.GlobalVariable" /> is stored in the structure. For example the Y component of a Vector3 is at index 1.</param>
      <returns>The <see cref="T:GTA.Native.GlobalVariable" /> at the index given.</returns>
    </member>
    <member name="M:GTA.Native.GlobalVariable.GetArray(System.Int32)">
      <summary>
Returns an array of all <see cref="T:GTA.Native.GlobalVariable" />s in a global array.
</summary>
      <param name="itemSize">The number of items stored in each array index. For example an array of Vector3s takes up 3 items.</param>
      <returns>The array of <see cref="T:GTA.Native.GlobalVariable" />s.</returns>
    </member>
    <member name="M:GTA.Native.GlobalVariable.GetArrayItem(System.Int32,System.Int32)">
      <summary>
Gets the <see cref="T:GTA.Native.GlobalVariable" /> stored at a specific index in a global array.
</summary>
      <param name="index">The array index.</param>
      <param name="itemSize">The number of items stored in each array index. For example an array of Vector3s takes up 3 items.</param>
      <returns>The <see cref="T:GTA.Native.GlobalVariable" /> at the index given.</returns>
    </member>
    <member name="F:GTA.Math.Vector3.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Z">
      <summary>
Gets or sets the Z component of the vector.
</summary>
      <value>The Z component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector3" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
      <param name="z">Initial value for the Z component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector3.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.Zero">
      <summary>
Returns a null vector. (0,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldUp">
      <summary>
Returns the world Up vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldDown">
      <summary>
Returns the world Down vector. (0,0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldNorth">
      <summary>
Returns the world North vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldSouth">
      <summary>
Returns the world South vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldEast">
      <summary>
Returns the world East vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldWest">
      <summary>
Returns the world West vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeRight">
      <summary>
Returns the relative Right vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeLeft">
      <summary>
Returns the relative Left vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeFront">
      <summary>
Returns the relative Front vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBack">
      <summary>
Returns the relative Back vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeTop">
      <summary>
Returns the relative Top vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBottom">
      <summary>
Returns the relative Bottom vector as used. (0,0,-1)
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo2D(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared2D(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Angle(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.SignedAngle(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Around(System.Single)">
      <summary>
Creates a random vector inside the circle around this position.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXYZ">
      <summary>
Returns a new normalized vector with random X, Y and Z components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Add(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Subtract(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Modulate(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Divide(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Negate(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Clamp(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Lerp(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize(GTA.Math.Vector3)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Dot(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Cross(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the cross product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The cross product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Project(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto another vector.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="onNormal">Vector to project onto, does not assume it is normalized.</param>
      <returns>The projected vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ProjectOnPlane(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto a plane defined by a normal orthogonal to the plane.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="planeNormal">Normal of the plane,  does not assume it is normalized.</param>
      <returns>The Projection of vector onto plane.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Reflect(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The vector to project onto the plane.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Minimize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Maximize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Addition(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Subtraction(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_UnaryNegation(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(System.Single,GTA.Math.Vector3)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Division(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Equality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Inequality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3@,GTA.Math.Vector3@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GTA.Math.Matrix">
      <summary>
Defines a 4x4 matrix.
</summary>
      <unmanaged>D3DXMATRIX</unmanaged>
    </member>
    <member name="F:GTA.Math.Matrix.M11">
      <summary>
Gets or sets the element of the matrix that exists in the first row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M12">
      <summary>
Gets or sets the element of the matrix that exists in the first row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M13">
      <summary>
Gets or sets the element of the matrix that exists in the first row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M14">
      <summary>
Gets or sets the element of the matrix that exists in the first row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M21">
      <summary>
Gets or sets the element of the matrix that exists in the second row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M22">
      <summary>
Gets or sets the element of the matrix that exists in the second row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M23">
      <summary>
Gets or sets the element of the matrix that exists in the second row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M24">
      <summary>
Gets or sets the element of the matrix that exists in the second row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M31">
      <summary>
Gets or sets the element of the matrix that exists in the third row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M32">
      <summary>
Gets or sets the element of the matrix that exists in the third row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M33">
      <summary>
Gets or sets the element of the matrix that exists in the third row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M34">
      <summary>
Gets or sets the element of the matrix that exists in the third row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M41">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M42">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M43">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M44">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and fourth column. 
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.Identity">
      <summary>
Gets a <see cref="T:GTA.Math.Matrix" /> that represents an identity matrix.
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.IsIdentity">
      <summary>
Gets a value indicating whether this instance is an identity matrix.
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.HasInverse">
      <summary>
Gets a value indicating whether this instance has an inverse matrix.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.FromArray(System.Single[])">
      <summary>
Converts the matrix to an array of floats.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.Determinant">
      <summary>
Calculates the determinant of the matrix.
</summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Inverse">
      <summary>
Calculates the inverse of the matrix if it exists.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.TransformPoint(GTA.Math.Vector3)">
      <summary>
Apply the transformation matrix to a point in world space
</summary>
      <param name="point">The original vertex location</param>
      <returns>The vertex location transformed by the given <see cref="T:GTA.Math.Matrix" /></returns>
    </member>
    <member name="M:GTA.Math.Matrix.InverseTransformPoint(GTA.Math.Vector3)">
      <summary>
Calculates the position of a point before this transformation matrix gets applied
</summary>
      <param name="point">The transformed vertex location</param>
      <returns>The original vertex location before being transformed by the given <see cref="T:GTA.Math.Matrix" /></returns>
    </member>
    <member name="M:GTA.Math.Matrix.Add(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the sum of two matrices.
</summary>
      <param name="left">The first matrix to add.</param>
      <param name="right">The second matrix to add.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Subtract(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the difference between two matrices.
</summary>
      <param name="left">The first matrix to subtract.</param>
      <param name="right">The second matrix to subtract.</param>
      <returns>The difference between the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the product of two matrices.
</summary>
      <param name="left">The first matrix to multiply.</param>
      <param name="right">The second matrix to multiply.</param>
      <returns>The product of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by the given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the quotient of two matrices.
</summary>
      <param name="left">The first matrix to divide.</param>
      <param name="right">The second matrix to divide.</param>
      <returns>The quotient of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by the given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Negate(GTA.Math.Matrix)">
      <summary>
Negates a matrix.
</summary>
      <param name="matrix">The matrix to be negated.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Inverse(GTA.Math.Matrix)">
      <summary>
Calculates the inverse of a matrix if it exists.
</summary>
      <returns>The inverse of the matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Lerp(GTA.Math.Matrix,GTA.Math.Matrix,System.Single)">
      <summary>
Performs a linear interpolation between two matricies.
</summary>
      <param name="start">Start matrix.</param>
      <param name="end">End matrix.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two matrices.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Matrix.RotationX(System.Single)">
      <summary>
Creates a matrix that rotates around the x-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationY(System.Single)">
      <summary>
Creates a matrix that rotates around the y-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationZ(System.Single)">
      <summary>
Creates a matrix that rotates around the z-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationAxis(GTA.Math.Vector3,System.Single)">
      <summary>
Creates a matrix that rotates around an arbitary axis.
</summary>
      <param name="axis">The axis around which to rotate.</param>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationQuaternion(GTA.Math.Quaternion)">
      <summary>
Creates a rotation matrix from a quaternion.
</summary>
      <param name="rotation">The quaternion to use to build the matrix.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>
Creates a rotation matrix with a specified yaw, pitch, and roll.
</summary>
      <param name="yaw">Yaw around the y-axis, in radians.</param>
      <param name="pitch">Pitch around the x-axis, in radians.</param>
      <param name="roll">Roll around the z-axis, in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Scaling(System.Single,System.Single,System.Single)">
      <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
      <param name="x">Scaling factor that is applied along the x-axis.</param>
      <param name="y">Scaling factor that is applied along the y-axis.</param>
      <param name="z">Scaling factor that is applied along the z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Scaling(GTA.Math.Vector3)">
      <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
      <param name="scale">Scaling factor for all three axes.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Translation(System.Single,System.Single,System.Single)">
      <summary>
Creates a translation matrix using the specified offsets.
</summary>
      <param name="x">X-coordinate offset.</param>
      <param name="y">Y-coordinate offset.</param>
      <param name="z">Z-coordinate offset.</param>
      <returns>The created translation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Translation(GTA.Math.Vector3)">
      <summary>
Creates a translation matrix using the specified offsets.
</summary>
      <param name="amount">The offset for all three coordinate planes.</param>
      <returns>The created translation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Transpose(GTA.Math.Matrix)">
      <summary>
Calculates the transpose of the specified matrix.
</summary>
      <param name="matrix">The matrix whose transpose is to be calculated.</param>
      <returns>The transpose of the specified matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_UnaryNegation(GTA.Math.Matrix)">
      <summary>
Negates a matrix.
</summary>
      <param name="matrix">The matrix to negate.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Addition(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Adds two matricies.
</summary>
      <param name="left">The first matrix to add.</param>
      <param name="right">The second matrix to add.</param>
      <returns>The sum of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Subtraction(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Subtracts two matricies.
</summary>
      <param name="left">The first matrix to subtract.</param>
      <param name="right">The second matrix to subtract.</param>
      <returns>The difference between the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Divides two matricies.
</summary>
      <param name="left">The first matrix to divide.</param>
      <param name="right">The second matrix to divide.</param>
      <returns>The quotient of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Multiplies two matricies.
</summary>
      <param name="left">The first matrix to multiply.</param>
      <param name="right">The second matrix to multiply.</param>
      <returns>The product of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(System.Single,GTA.Math.Matrix)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="right">The matrix to scale.</param>
      <param name="left">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Equality(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Inequality(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.ToArray">
      <summary>
Converts the matrix to an array of floats.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix@,GTA.Math.Matrix@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Quaternion.X">
      <summary>
Gets or sets the X component of the quaternion.
</summary>
      <value>The X component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.Y">
      <summary>
Gets or sets the Y component of the quaternion.
</summary>
      <value>The Y component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.Z">
      <summary>
Gets or sets the Z component of the quaternion.
</summary>
      <value>The Z component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.W">
      <summary>
Gets or sets the W component of the quaternion.
</summary>
      <value>The W component of the quaternion.</value>
    </member>
    <member name="M:GTA.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Quaternion" /> structure.
</summary>
      <param name="x">The X component of the quaternion.</param>
      <param name="y">The Y component of the quaternion.</param>
      <param name="z">The Z component of the quaternion.</param>
      <param name="w">The W component of the quaternion.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.#ctor(GTA.Math.Vector3,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Quaternion" /> structure.
</summary>
      <param name="value">A <see cref="T:GTA.Math.Vector3" /> containing the first three values of the quaternion.</param>
      <param name="w">The W component of the quaternion.</param>
    </member>
    <member name="P:GTA.Math.Quaternion.Identity">
      <summary>
Gets the identity <see cref="T:GTA.Math.Quaternion" /> (0, 0, 0, 1).
</summary>
    </member>
    <member name="P:GTA.Math.Quaternion.Axis">
      <summary>
Gets the axis components of the quaternion.
</summary>
    </member>
    <member name="P:GTA.Math.Quaternion.Angle">
      <summary>
Gets the angle of the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Length">
      <summary>
Calculates the length of the quaternion.
</summary>
      <returns>The length of the quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.LengthSquared">
      <summary>
Calculates the squared length of the quaternion.
</summary>
      <returns>The squared length of the quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Normalize">
      <summary>
Converts the quaternion into a unit quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Conjugate">
      <summary>
Conjugates the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Invert">
      <summary>
Conjugates and renormalizes the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Add(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Adds two quaternions.
</summary>
      <param name="left">The first quaternion to add.</param>
      <param name="right">The second quaternion to add.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Divide(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Divides a quaternion by another.
</summary>
      <param name="left">The first quaternion to divide.</param>
      <param name="right">The second quaternion to divide.</param>
      <returns>The divided quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Dot(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Calculates the dot product of two quaternions.
</summary>
      <param name="left">First source quaternion.</param>
      <param name="right">Second source quaternion.</param>
      <returns>The dot product of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Invert(GTA.Math.Quaternion)">
      <summary>
Conjugates and renormalizes the quaternion.
</summary>
      <param name="quaternion">The quaternion to conjugate and renormalize.</param>
      <returns>The conjugated and renormalized quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Lerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Performs a linear interpolation between two quaternion.
</summary>
      <param name="start">Start quaternion.</param>
      <param name="end">End quaternion.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two quaternions.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Quaternion.Slerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Interpolates between two quaternions, using spherical linear interpolation..
</summary>
      <param name="start">Start quaternion.</param>
      <param name="end">End quaternion.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The spherical linear interpolation of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.SlerpUnclamped(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Interpolates between two quaternions, using spherical linear interpolation. The parameter /t/ is not clamped.
</summary>
      <param name="a" />
      <param name="b" />
      <param name="t" />
    </member>
    <member name="M:GTA.Math.Quaternion.FromToRotation(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Creates a rotation which rotates from fromDirection to toDirection.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.RotateTowards(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Rotates a rotation from towards to.
</summary>
      <param name="from">From Quaternion.</param>
      <param name="to">To Quaternion.</param>
      <param name="maxDegreesDelta" />
    </member>
    <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Modulates a quaternion by another.
</summary>
      <param name="left">The first quaternion to modulate.</param>
      <param name="right">The second quaternion to modulate.</param>
      <returns>The modulated quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,System.Single)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Negate(GTA.Math.Quaternion)">
      <summary>
Reverses the direction of a given quaternion.
</summary>
      <param name="quaternion">The quaternion to negate.</param>
      <returns>A quaternion facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Normalize(GTA.Math.Quaternion)">
      <summary>
Converts the quaternion into a unit quaternion.
</summary>
      <param name="quaternion">The quaternion to normalize.</param>
      <returns>The normalized quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.AngleBetween(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Returns the angle in degrees between two rotations a and b.
</summary>
      <param name="a">The first quaternion to calculate angle.</param>
      <param name="b">The second quaternion to calculate angle.</param>
      <returns>The angle in degrees between two rotations a and b.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Euler(System.Single,System.Single,System.Single)">
      <summary>
eturns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
</summary>
      <param name="x">X degrees.</param>
      <param name="y">Y degrees.</param>
      <param name="z">Z degrees.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.Euler(GTA.Math.Vector3)">
      <summary>
Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
</summary>
      <param name="euler">Euler angles in degrees.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationAxis(GTA.Math.Vector3,System.Single)">
      <summary>
Creates a quaternion given a rotation and an axis.
</summary>
      <param name="axis">The axis of rotation.</param>
      <param name="angle">The angle of rotation.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationMatrix(GTA.Math.Matrix)">
      <summary>
Creates a quaternion given a rotation matrix.
</summary>
      <param name="matrix">The rotation matrix.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>
Creates a quaternion given a yaw, pitch, and roll value.
</summary>
      <param name="yaw">The yaw of rotation.</param>
      <param name="pitch">The pitch of rotation.</param>
      <param name="roll">The roll of rotation.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Subtract(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Subtracts two quaternions.
</summary>
      <param name="left">The first quaternion to subtract.</param>
      <param name="right">The second quaternion to subtract.</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Multiplies a quaternion by another.
</summary>
      <param name="left">The first quaternion to multiply.</param>
      <param name="right">The second quaternion to multiply.</param>
      <returns>The multiplied quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Vector3)">
      <summary>
Rotates the point with rotation.
</summary>
      <param name="rotation">The quaternion to rotate the vector.</param>
      <param name="point">The vector to be rotated.</param>
      <returns>The vector after rotation.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,System.Single)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(System.Single,GTA.Math.Quaternion)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Division(GTA.Math.Quaternion,System.Single)">
      <summary>
Divides a quaternion by another.
</summary>
      <param name="left">The first quaternion to divide.</param>
      <param name="right">The second quaternion to divide.</param>
      <returns>The divided quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Addition(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Adds two quaternions.
</summary>
      <param name="left">The first quaternion to add.</param>
      <param name="right">The second quaternion to add.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Subtraction(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Subtracts two quaternions.
</summary>
      <param name="left">The first quaternion to subtract.</param>
      <param name="right">The second quaternion to subtract.</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_UnaryNegation(GTA.Math.Quaternion)">
      <summary>
Reverses the direction of a given quaternion.
</summary>
      <param name="quaternion">The quaternion to negate.</param>
      <returns>A quaternion facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Equality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Inequality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(GTA.Math.Quaternion)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(GTA.Math.Quaternion@,GTA.Math.Quaternion@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Vector2.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector2.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector2.#ctor(System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector2" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector2.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Zero">
      <summary>
Returns a null vector. (0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Up">
      <summary>
Returns the up vector. (0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Down">
      <summary>
Returns the down vector. (0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Right">
      <summary>
Returns the right vector. (1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Left">
      <summary>
Returns the left vector. (-1,0)
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceTo(GTA.Math.Vector2)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceToSquared(GTA.Math.Vector2)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The squared distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Distance(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceSquared(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Angle(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.SignedAngle(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.Add(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Subtract(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Multiply(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Modulate(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Divide(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Negate(GTA.Math.Vector2)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Clamp(GTA.Math.Vector2,GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Lerp(GTA.Math.Vector2,GTA.Math.Vector2,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector2.Normalize(GTA.Math.Vector2)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Dot(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Reflect(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The source vector.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector2.Minimize(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Maximize(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Addition(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Subtraction(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_UnaryNegation(GTA.Math.Vector2)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Multiply(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Multiply(System.Single,GTA.Math.Vector2)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Division(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Equality(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Inequality(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(GTA.Math.Vector2)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(GTA.Math.Vector2@,GTA.Math.Vector2@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Native.Function.Call``1(&lt;unknown type&gt;,GTA.Native.InputArgument[])">
      <summary>
Calls the specified native script function and returns its return value.
</summary>
      <param name="hash">The hashed name of the native script function.</param>
      <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
      <returns>The return value of the native</returns>
    </member>
    <member name="M:GTA.Native.Function.Call(&lt;unknown type&gt;,GTA.Native.InputArgument[])">
      <summary>
Calls the specified native script function and ignores its return value.
</summary>
      <param name="hash">The hashed name of the script function.</param>
      <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
    </member>
    <member name="M:GTA.Native.GlobalVariable.Get(System.Int32)">
      <summary>
Gets the global variable at the specified index.
</summary>
      <param name="index">The index of the global variable.</param>
      <returns>A <see cref="T:GTA.Native.GlobalVariable" /> instance representing the global variable.</returns>
    </member>
    <member name="P:GTA.Native.GlobalVariable.MemoryAddress">
      <summary>
Gets the native memory address of the <see cref="T:GTA.Native.GlobalVariable" />.
</summary>
    </member>
    <member name="M:GTA.Native.GlobalVariable.Read``1">
      <summary>
Gets the value stored in the <see cref="T:GTA.Native.GlobalVariable" />.
</summary>
    </member>
    <member name="M:GTA.Native.GlobalVariable.Write``1(``0)">
      <summary>
Set the value stored in the <see cref="T:GTA.Native.GlobalVariable" />.
</summary>
      <param name="value">The new value to assign to the <see cref="T:GTA.Native.GlobalVariable" />.</param>
    </member>
    <member name="M:GTA.Native.GlobalVariable.WriteString(System.String,System.Int32)">
      <summary>
Set the value stored in the <see cref="T:GTA.Native.GlobalVariable" /> to a string.
</summary>
      <param name="value">The string to set the <see cref="T:GTA.Native.GlobalVariable" /> to.</param>
      <param name="maxSize">The maximum size of the string. Can be found for a given global variable by checking the decompiled scripts from the game.</param>
    </member>
    <member name="M:GTA.Native.GlobalVariable.GetStructField(System.Int32)">
      <summary>
Gets the <see cref="T:GTA.Native.GlobalVariable" /> stored at a given offset in a global structure.
</summary>
      <param name="index">The index the <see cref="T:GTA.Native.GlobalVariable" /> is stored in the structure. For example the Y component of a Vector3 is at index 1.</param>
      <returns>The <see cref="T:GTA.Native.GlobalVariable" /> at the index given.</returns>
    </member>
    <member name="M:GTA.Native.GlobalVariable.GetArray(System.Int32)">
      <summary>
Returns an array of all <see cref="T:GTA.Native.GlobalVariable" />s in a global array.
</summary>
      <param name="itemSize">The number of items stored in each array index. For example an array of Vector3s takes up 3 items.</param>
      <returns>The array of <see cref="T:GTA.Native.GlobalVariable" />s.</returns>
    </member>
    <member name="M:GTA.Native.GlobalVariable.GetArrayItem(System.Int32,System.Int32)">
      <summary>
Gets the <see cref="T:GTA.Native.GlobalVariable" /> stored at a specific index in a global array.
</summary>
      <param name="index">The array index.</param>
      <param name="itemSize">The number of items stored in each array index. For example an array of Vector3s takes up 3 items.</param>
      <returns>The <see cref="T:GTA.Native.GlobalVariable" /> at the index given.</returns>
    </member>
    <member name="F:GTA.Math.Vector2.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector2.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector2.#ctor(System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector2" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector2.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Zero">
      <summary>
Returns a null vector. (0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Up">
      <summary>
Returns the up vector. (0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Down">
      <summary>
Returns the down vector. (0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Right">
      <summary>
Returns the right vector. (1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Left">
      <summary>
Returns the left vector. (-1,0)
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceTo(GTA.Math.Vector2)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceToSquared(GTA.Math.Vector2)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The squared distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Distance(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceSquared(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Angle(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.SignedAngle(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.Add(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Subtract(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Multiply(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Modulate(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Divide(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Negate(GTA.Math.Vector2)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Clamp(GTA.Math.Vector2,GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Lerp(GTA.Math.Vector2,GTA.Math.Vector2,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector2.Normalize(GTA.Math.Vector2)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Dot(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Reflect(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The source vector.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector2.Minimize(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Maximize(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Addition(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Subtraction(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_UnaryNegation(GTA.Math.Vector2)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Multiply(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Multiply(System.Single,GTA.Math.Vector2)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Division(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Equality(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Inequality(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(GTA.Math.Vector2)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(GTA.Math.Vector2@,GTA.Math.Vector2@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Vector3.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Z">
      <summary>
Gets or sets the Z component of the vector.
</summary>
      <value>The Z component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector3" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
      <param name="z">Initial value for the Z component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector3.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.Zero">
      <summary>
Returns a null vector. (0,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldUp">
      <summary>
Returns the world Up vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldDown">
      <summary>
Returns the world Down vector. (0,0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldNorth">
      <summary>
Returns the world North vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldSouth">
      <summary>
Returns the world South vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldEast">
      <summary>
Returns the world East vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldWest">
      <summary>
Returns the world West vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeRight">
      <summary>
Returns the relative Right vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeLeft">
      <summary>
Returns the relative Left vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeFront">
      <summary>
Returns the relative Front vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBack">
      <summary>
Returns the relative Back vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeTop">
      <summary>
Returns the relative Top vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBottom">
      <summary>
Returns the relative Bottom vector as used. (0,0,-1)
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo2D(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared2D(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Angle(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.SignedAngle(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Around(System.Single)">
      <summary>
Creates a random vector inside the circle around this position.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXYZ">
      <summary>
Returns a new normalized vector with random X, Y and Z components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Add(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Subtract(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Modulate(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Divide(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Negate(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Clamp(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Lerp(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize(GTA.Math.Vector3)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Dot(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Cross(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the cross product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The cross product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Project(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto another vector.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="onNormal">Vector to project onto, does not assume it is normalized.</param>
      <returns>The projected vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ProjectOnPlane(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto a plane defined by a normal orthogonal to the plane.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="planeNormal">Normal of the plane,  does not assume it is normalized.</param>
      <returns>The Projection of vector onto plane.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Reflect(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The vector to project onto the plane.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Minimize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Maximize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Addition(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Subtraction(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_UnaryNegation(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(System.Single,GTA.Math.Vector3)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Division(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Equality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Inequality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3@,GTA.Math.Vector3@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Vector3.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Z">
      <summary>
Gets or sets the Z component of the vector.
</summary>
      <value>The Z component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector3" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
      <param name="z">Initial value for the Z component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector3.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.Zero">
      <summary>
Returns a null vector. (0,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldUp">
      <summary>
Returns the world Up vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldDown">
      <summary>
Returns the world Down vector. (0,0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldNorth">
      <summary>
Returns the world North vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldSouth">
      <summary>
Returns the world South vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldEast">
      <summary>
Returns the world East vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldWest">
      <summary>
Returns the world West vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeRight">
      <summary>
Returns the relative Right vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeLeft">
      <summary>
Returns the relative Left vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeFront">
      <summary>
Returns the relative Front vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBack">
      <summary>
Returns the relative Back vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeTop">
      <summary>
Returns the relative Top vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBottom">
      <summary>
Returns the relative Bottom vector as used. (0,0,-1)
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo2D(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared2D(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Angle(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.SignedAngle(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Around(System.Single)">
      <summary>
Creates a random vector inside the circle around this position.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXYZ">
      <summary>
Returns a new normalized vector with random X, Y and Z components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Add(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Subtract(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Modulate(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Divide(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Negate(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Clamp(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Lerp(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize(GTA.Math.Vector3)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Dot(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Cross(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the cross product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The cross product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Project(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto another vector.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="onNormal">Vector to project onto, does not assume it is normalized.</param>
      <returns>The projected vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ProjectOnPlane(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto a plane defined by a normal orthogonal to the plane.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="planeNormal">Normal of the plane,  does not assume it is normalized.</param>
      <returns>The Projection of vector onto plane.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Reflect(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The vector to project onto the plane.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Minimize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Maximize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Addition(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Subtraction(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_UnaryNegation(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(System.Single,GTA.Math.Vector3)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Division(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Equality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Inequality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3@,GTA.Math.Vector3@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GTA.Math.Matrix">
      <summary>
Defines a 4x4 matrix.
</summary>
      <unmanaged>D3DXMATRIX</unmanaged>
    </member>
    <member name="F:GTA.Math.Matrix.M11">
      <summary>
Gets or sets the element of the matrix that exists in the first row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M12">
      <summary>
Gets or sets the element of the matrix that exists in the first row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M13">
      <summary>
Gets or sets the element of the matrix that exists in the first row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M14">
      <summary>
Gets or sets the element of the matrix that exists in the first row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M21">
      <summary>
Gets or sets the element of the matrix that exists in the second row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M22">
      <summary>
Gets or sets the element of the matrix that exists in the second row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M23">
      <summary>
Gets or sets the element of the matrix that exists in the second row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M24">
      <summary>
Gets or sets the element of the matrix that exists in the second row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M31">
      <summary>
Gets or sets the element of the matrix that exists in the third row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M32">
      <summary>
Gets or sets the element of the matrix that exists in the third row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M33">
      <summary>
Gets or sets the element of the matrix that exists in the third row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M34">
      <summary>
Gets or sets the element of the matrix that exists in the third row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M41">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M42">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M43">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M44">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and fourth column. 
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.Identity">
      <summary>
Gets a <see cref="T:GTA.Math.Matrix" /> that represents an identity matrix.
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.IsIdentity">
      <summary>
Gets a value indicating whether this instance is an identity matrix.
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.HasInverse">
      <summary>
Gets a value indicating whether this instance has an inverse matrix.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.FromArray(System.Single[])">
      <summary>
Converts the matrix to an array of floats.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.Determinant">
      <summary>
Calculates the determinant of the matrix.
</summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Inverse">
      <summary>
Calculates the inverse of the matrix if it exists.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.TransformPoint(GTA.Math.Vector3)">
      <summary>
Apply the transformation matrix to a point in world space
</summary>
      <param name="point">The original vertex location</param>
      <returns>The vertex location transformed by the given <see cref="T:GTA.Math.Matrix" /></returns>
    </member>
    <member name="M:GTA.Math.Matrix.InverseTransformPoint(GTA.Math.Vector3)">
      <summary>
Calculates the position of a point before this transformation matrix gets applied
</summary>
      <param name="point">The transformed vertex location</param>
      <returns>The original vertex location before being transformed by the given <see cref="T:GTA.Math.Matrix" /></returns>
    </member>
    <member name="M:GTA.Math.Matrix.Add(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the sum of two matrices.
</summary>
      <param name="left">The first matrix to add.</param>
      <param name="right">The second matrix to add.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Subtract(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the difference between two matrices.
</summary>
      <param name="left">The first matrix to subtract.</param>
      <param name="right">The second matrix to subtract.</param>
      <returns>The difference between the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the product of two matrices.
</summary>
      <param name="left">The first matrix to multiply.</param>
      <param name="right">The second matrix to multiply.</param>
      <returns>The product of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by the given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the quotient of two matrices.
</summary>
      <param name="left">The first matrix to divide.</param>
      <param name="right">The second matrix to divide.</param>
      <returns>The quotient of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by the given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Negate(GTA.Math.Matrix)">
      <summary>
Negates a matrix.
</summary>
      <param name="matrix">The matrix to be negated.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Inverse(GTA.Math.Matrix)">
      <summary>
Calculates the inverse of a matrix if it exists.
</summary>
      <returns>The inverse of the matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Lerp(GTA.Math.Matrix,GTA.Math.Matrix,System.Single)">
      <summary>
Performs a linear interpolation between two matricies.
</summary>
      <param name="start">Start matrix.</param>
      <param name="end">End matrix.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two matrices.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Matrix.RotationX(System.Single)">
      <summary>
Creates a matrix that rotates around the x-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationY(System.Single)">
      <summary>
Creates a matrix that rotates around the y-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationZ(System.Single)">
      <summary>
Creates a matrix that rotates around the z-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationAxis(GTA.Math.Vector3,System.Single)">
      <summary>
Creates a matrix that rotates around an arbitary axis.
</summary>
      <param name="axis">The axis around which to rotate.</param>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationQuaternion(GTA.Math.Quaternion)">
      <summary>
Creates a rotation matrix from a quaternion.
</summary>
      <param name="rotation">The quaternion to use to build the matrix.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>
Creates a rotation matrix with a specified yaw, pitch, and roll.
</summary>
      <param name="yaw">Yaw around the y-axis, in radians.</param>
      <param name="pitch">Pitch around the x-axis, in radians.</param>
      <param name="roll">Roll around the z-axis, in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Scaling(System.Single,System.Single,System.Single)">
      <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
      <param name="x">Scaling factor that is applied along the x-axis.</param>
      <param name="y">Scaling factor that is applied along the y-axis.</param>
      <param name="z">Scaling factor that is applied along the z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Scaling(GTA.Math.Vector3)">
      <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
      <param name="scale">Scaling factor for all three axes.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Translation(System.Single,System.Single,System.Single)">
      <summary>
Creates a translation matrix using the specified offsets.
</summary>
      <param name="x">X-coordinate offset.</param>
      <param name="y">Y-coordinate offset.</param>
      <param name="z">Z-coordinate offset.</param>
      <returns>The created translation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Translation(GTA.Math.Vector3)">
      <summary>
Creates a translation matrix using the specified offsets.
</summary>
      <param name="amount">The offset for all three coordinate planes.</param>
      <returns>The created translation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Transpose(GTA.Math.Matrix)">
      <summary>
Calculates the transpose of the specified matrix.
</summary>
      <param name="matrix">The matrix whose transpose is to be calculated.</param>
      <returns>The transpose of the specified matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_UnaryNegation(GTA.Math.Matrix)">
      <summary>
Negates a matrix.
</summary>
      <param name="matrix">The matrix to negate.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Addition(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Adds two matricies.
</summary>
      <param name="left">The first matrix to add.</param>
      <param name="right">The second matrix to add.</param>
      <returns>The sum of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Subtraction(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Subtracts two matricies.
</summary>
      <param name="left">The first matrix to subtract.</param>
      <param name="right">The second matrix to subtract.</param>
      <returns>The difference between the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Divides two matricies.
</summary>
      <param name="left">The first matrix to divide.</param>
      <param name="right">The second matrix to divide.</param>
      <returns>The quotient of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Multiplies two matricies.
</summary>
      <param name="left">The first matrix to multiply.</param>
      <param name="right">The second matrix to multiply.</param>
      <returns>The product of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(System.Single,GTA.Math.Matrix)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="right">The matrix to scale.</param>
      <param name="left">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Equality(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Inequality(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.ToArray">
      <summary>
Converts the matrix to an array of floats.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix@,GTA.Math.Matrix@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GTA.Math.Matrix">
      <summary>
Defines a 4x4 matrix.
</summary>
      <unmanaged>D3DXMATRIX</unmanaged>
    </member>
    <member name="F:GTA.Math.Matrix.M11">
      <summary>
Gets or sets the element of the matrix that exists in the first row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M12">
      <summary>
Gets or sets the element of the matrix that exists in the first row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M13">
      <summary>
Gets or sets the element of the matrix that exists in the first row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M14">
      <summary>
Gets or sets the element of the matrix that exists in the first row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M21">
      <summary>
Gets or sets the element of the matrix that exists in the second row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M22">
      <summary>
Gets or sets the element of the matrix that exists in the second row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M23">
      <summary>
Gets or sets the element of the matrix that exists in the second row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M24">
      <summary>
Gets or sets the element of the matrix that exists in the second row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M31">
      <summary>
Gets or sets the element of the matrix that exists in the third row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M32">
      <summary>
Gets or sets the element of the matrix that exists in the third row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M33">
      <summary>
Gets or sets the element of the matrix that exists in the third row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M34">
      <summary>
Gets or sets the element of the matrix that exists in the third row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M41">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M42">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M43">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M44">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and fourth column. 
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.Identity">
      <summary>
Gets a <see cref="T:GTA.Math.Matrix" /> that represents an identity matrix.
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.IsIdentity">
      <summary>
Gets a value indicating whether this instance is an identity matrix.
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.HasInverse">
      <summary>
Gets a value indicating whether this instance has an inverse matrix.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.FromArray(System.Single[])">
      <summary>
Converts the matrix to an array of floats.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.Determinant">
      <summary>
Calculates the determinant of the matrix.
</summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Inverse">
      <summary>
Calculates the inverse of the matrix if it exists.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.TransformPoint(GTA.Math.Vector3)">
      <summary>
Apply the transformation matrix to a point in world space
</summary>
      <param name="point">The original vertex location</param>
      <returns>The vertex location transformed by the given <see cref="T:GTA.Math.Matrix" /></returns>
    </member>
    <member name="M:GTA.Math.Matrix.InverseTransformPoint(GTA.Math.Vector3)">
      <summary>
Calculates the position of a point before this transformation matrix gets applied
</summary>
      <param name="point">The transformed vertex location</param>
      <returns>The original vertex location before being transformed by the given <see cref="T:GTA.Math.Matrix" /></returns>
    </member>
    <member name="M:GTA.Math.Matrix.Add(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the sum of two matrices.
</summary>
      <param name="left">The first matrix to add.</param>
      <param name="right">The second matrix to add.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Subtract(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the difference between two matrices.
</summary>
      <param name="left">The first matrix to subtract.</param>
      <param name="right">The second matrix to subtract.</param>
      <returns>The difference between the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the product of two matrices.
</summary>
      <param name="left">The first matrix to multiply.</param>
      <param name="right">The second matrix to multiply.</param>
      <returns>The product of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by the given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the quotient of two matrices.
</summary>
      <param name="left">The first matrix to divide.</param>
      <param name="right">The second matrix to divide.</param>
      <returns>The quotient of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by the given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Negate(GTA.Math.Matrix)">
      <summary>
Negates a matrix.
</summary>
      <param name="matrix">The matrix to be negated.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Inverse(GTA.Math.Matrix)">
      <summary>
Calculates the inverse of a matrix if it exists.
</summary>
      <returns>The inverse of the matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Lerp(GTA.Math.Matrix,GTA.Math.Matrix,System.Single)">
      <summary>
Performs a linear interpolation between two matricies.
</summary>
      <param name="start">Start matrix.</param>
      <param name="end">End matrix.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two matrices.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Matrix.RotationX(System.Single)">
      <summary>
Creates a matrix that rotates around the x-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationY(System.Single)">
      <summary>
Creates a matrix that rotates around the y-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationZ(System.Single)">
      <summary>
Creates a matrix that rotates around the z-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationAxis(GTA.Math.Vector3,System.Single)">
      <summary>
Creates a matrix that rotates around an arbitary axis.
</summary>
      <param name="axis">The axis around which to rotate.</param>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationQuaternion(GTA.Math.Quaternion)">
      <summary>
Creates a rotation matrix from a quaternion.
</summary>
      <param name="rotation">The quaternion to use to build the matrix.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>
Creates a rotation matrix with a specified yaw, pitch, and roll.
</summary>
      <param name="yaw">Yaw around the y-axis, in radians.</param>
      <param name="pitch">Pitch around the x-axis, in radians.</param>
      <param name="roll">Roll around the z-axis, in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Scaling(System.Single,System.Single,System.Single)">
      <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
      <param name="x">Scaling factor that is applied along the x-axis.</param>
      <param name="y">Scaling factor that is applied along the y-axis.</param>
      <param name="z">Scaling factor that is applied along the z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Scaling(GTA.Math.Vector3)">
      <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
      <param name="scale">Scaling factor for all three axes.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Translation(System.Single,System.Single,System.Single)">
      <summary>
Creates a translation matrix using the specified offsets.
</summary>
      <param name="x">X-coordinate offset.</param>
      <param name="y">Y-coordinate offset.</param>
      <param name="z">Z-coordinate offset.</param>
      <returns>The created translation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Translation(GTA.Math.Vector3)">
      <summary>
Creates a translation matrix using the specified offsets.
</summary>
      <param name="amount">The offset for all three coordinate planes.</param>
      <returns>The created translation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Transpose(GTA.Math.Matrix)">
      <summary>
Calculates the transpose of the specified matrix.
</summary>
      <param name="matrix">The matrix whose transpose is to be calculated.</param>
      <returns>The transpose of the specified matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_UnaryNegation(GTA.Math.Matrix)">
      <summary>
Negates a matrix.
</summary>
      <param name="matrix">The matrix to negate.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Addition(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Adds two matricies.
</summary>
      <param name="left">The first matrix to add.</param>
      <param name="right">The second matrix to add.</param>
      <returns>The sum of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Subtraction(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Subtracts two matricies.
</summary>
      <param name="left">The first matrix to subtract.</param>
      <param name="right">The second matrix to subtract.</param>
      <returns>The difference between the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Divides two matricies.
</summary>
      <param name="left">The first matrix to divide.</param>
      <param name="right">The second matrix to divide.</param>
      <returns>The quotient of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Multiplies two matricies.
</summary>
      <param name="left">The first matrix to multiply.</param>
      <param name="right">The second matrix to multiply.</param>
      <returns>The product of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(System.Single,GTA.Math.Matrix)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="right">The matrix to scale.</param>
      <param name="left">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Equality(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Inequality(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.ToArray">
      <summary>
Converts the matrix to an array of floats.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix@,GTA.Math.Matrix@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Vector3.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Z">
      <summary>
Gets or sets the Z component of the vector.
</summary>
      <value>The Z component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector3" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
      <param name="z">Initial value for the Z component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector3.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.Zero">
      <summary>
Returns a null vector. (0,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldUp">
      <summary>
Returns the world Up vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldDown">
      <summary>
Returns the world Down vector. (0,0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldNorth">
      <summary>
Returns the world North vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldSouth">
      <summary>
Returns the world South vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldEast">
      <summary>
Returns the world East vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldWest">
      <summary>
Returns the world West vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeRight">
      <summary>
Returns the relative Right vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeLeft">
      <summary>
Returns the relative Left vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeFront">
      <summary>
Returns the relative Front vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBack">
      <summary>
Returns the relative Back vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeTop">
      <summary>
Returns the relative Top vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBottom">
      <summary>
Returns the relative Bottom vector as used. (0,0,-1)
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo2D(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared2D(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Angle(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.SignedAngle(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Around(System.Single)">
      <summary>
Creates a random vector inside the circle around this position.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXYZ">
      <summary>
Returns a new normalized vector with random X, Y and Z components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Add(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Subtract(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Modulate(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Divide(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Negate(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Clamp(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Lerp(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize(GTA.Math.Vector3)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Dot(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Cross(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the cross product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The cross product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Project(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto another vector.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="onNormal">Vector to project onto, does not assume it is normalized.</param>
      <returns>The projected vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ProjectOnPlane(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto a plane defined by a normal orthogonal to the plane.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="planeNormal">Normal of the plane,  does not assume it is normalized.</param>
      <returns>The Projection of vector onto plane.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Reflect(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The vector to project onto the plane.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Minimize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Maximize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Addition(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Subtraction(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_UnaryNegation(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(System.Single,GTA.Math.Vector3)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Division(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Equality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Inequality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3@,GTA.Math.Vector3@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Quaternion.X">
      <summary>
Gets or sets the X component of the quaternion.
</summary>
      <value>The X component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.Y">
      <summary>
Gets or sets the Y component of the quaternion.
</summary>
      <value>The Y component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.Z">
      <summary>
Gets or sets the Z component of the quaternion.
</summary>
      <value>The Z component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.W">
      <summary>
Gets or sets the W component of the quaternion.
</summary>
      <value>The W component of the quaternion.</value>
    </member>
    <member name="M:GTA.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Quaternion" /> structure.
</summary>
      <param name="x">The X component of the quaternion.</param>
      <param name="y">The Y component of the quaternion.</param>
      <param name="z">The Z component of the quaternion.</param>
      <param name="w">The W component of the quaternion.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.#ctor(GTA.Math.Vector3,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Quaternion" /> structure.
</summary>
      <param name="value">A <see cref="T:GTA.Math.Vector3" /> containing the first three values of the quaternion.</param>
      <param name="w">The W component of the quaternion.</param>
    </member>
    <member name="P:GTA.Math.Quaternion.Identity">
      <summary>
Gets the identity <see cref="T:GTA.Math.Quaternion" /> (0, 0, 0, 1).
</summary>
    </member>
    <member name="P:GTA.Math.Quaternion.Axis">
      <summary>
Gets the axis components of the quaternion.
</summary>
    </member>
    <member name="P:GTA.Math.Quaternion.Angle">
      <summary>
Gets the angle of the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Length">
      <summary>
Calculates the length of the quaternion.
</summary>
      <returns>The length of the quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.LengthSquared">
      <summary>
Calculates the squared length of the quaternion.
</summary>
      <returns>The squared length of the quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Normalize">
      <summary>
Converts the quaternion into a unit quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Conjugate">
      <summary>
Conjugates the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Invert">
      <summary>
Conjugates and renormalizes the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Add(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Adds two quaternions.
</summary>
      <param name="left">The first quaternion to add.</param>
      <param name="right">The second quaternion to add.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Divide(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Divides a quaternion by another.
</summary>
      <param name="left">The first quaternion to divide.</param>
      <param name="right">The second quaternion to divide.</param>
      <returns>The divided quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Dot(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Calculates the dot product of two quaternions.
</summary>
      <param name="left">First source quaternion.</param>
      <param name="right">Second source quaternion.</param>
      <returns>The dot product of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Invert(GTA.Math.Quaternion)">
      <summary>
Conjugates and renormalizes the quaternion.
</summary>
      <param name="quaternion">The quaternion to conjugate and renormalize.</param>
      <returns>The conjugated and renormalized quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Lerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Performs a linear interpolation between two quaternion.
</summary>
      <param name="start">Start quaternion.</param>
      <param name="end">End quaternion.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two quaternions.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Quaternion.Slerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Interpolates between two quaternions, using spherical linear interpolation..
</summary>
      <param name="start">Start quaternion.</param>
      <param name="end">End quaternion.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The spherical linear interpolation of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.SlerpUnclamped(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Interpolates between two quaternions, using spherical linear interpolation. The parameter /t/ is not clamped.
</summary>
      <param name="a" />
      <param name="b" />
      <param name="t" />
    </member>
    <member name="M:GTA.Math.Quaternion.FromToRotation(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Creates a rotation which rotates from fromDirection to toDirection.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.RotateTowards(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Rotates a rotation from towards to.
</summary>
      <param name="from">From Quaternion.</param>
      <param name="to">To Quaternion.</param>
      <param name="maxDegreesDelta" />
    </member>
    <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Modulates a quaternion by another.
</summary>
      <param name="left">The first quaternion to modulate.</param>
      <param name="right">The second quaternion to modulate.</param>
      <returns>The modulated quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,System.Single)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Negate(GTA.Math.Quaternion)">
      <summary>
Reverses the direction of a given quaternion.
</summary>
      <param name="quaternion">The quaternion to negate.</param>
      <returns>A quaternion facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Normalize(GTA.Math.Quaternion)">
      <summary>
Converts the quaternion into a unit quaternion.
</summary>
      <param name="quaternion">The quaternion to normalize.</param>
      <returns>The normalized quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.AngleBetween(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Returns the angle in degrees between two rotations a and b.
</summary>
      <param name="a">The first quaternion to calculate angle.</param>
      <param name="b">The second quaternion to calculate angle.</param>
      <returns>The angle in degrees between two rotations a and b.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Euler(System.Single,System.Single,System.Single)">
      <summary>
eturns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
</summary>
      <param name="x">X degrees.</param>
      <param name="y">Y degrees.</param>
      <param name="z">Z degrees.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.Euler(GTA.Math.Vector3)">
      <summary>
Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
</summary>
      <param name="euler">Euler angles in degrees.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationAxis(GTA.Math.Vector3,System.Single)">
      <summary>
Creates a quaternion given a rotation and an axis.
</summary>
      <param name="axis">The axis of rotation.</param>
      <param name="angle">The angle of rotation.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationMatrix(GTA.Math.Matrix)">
      <summary>
Creates a quaternion given a rotation matrix.
</summary>
      <param name="matrix">The rotation matrix.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>
Creates a quaternion given a yaw, pitch, and roll value.
</summary>
      <param name="yaw">The yaw of rotation.</param>
      <param name="pitch">The pitch of rotation.</param>
      <param name="roll">The roll of rotation.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Subtract(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Subtracts two quaternions.
</summary>
      <param name="left">The first quaternion to subtract.</param>
      <param name="right">The second quaternion to subtract.</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Multiplies a quaternion by another.
</summary>
      <param name="left">The first quaternion to multiply.</param>
      <param name="right">The second quaternion to multiply.</param>
      <returns>The multiplied quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Vector3)">
      <summary>
Rotates the point with rotation.
</summary>
      <param name="rotation">The quaternion to rotate the vector.</param>
      <param name="point">The vector to be rotated.</param>
      <returns>The vector after rotation.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,System.Single)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(System.Single,GTA.Math.Quaternion)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Division(GTA.Math.Quaternion,System.Single)">
      <summary>
Divides a quaternion by another.
</summary>
      <param name="left">The first quaternion to divide.</param>
      <param name="right">The second quaternion to divide.</param>
      <returns>The divided quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Addition(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Adds two quaternions.
</summary>
      <param name="left">The first quaternion to add.</param>
      <param name="right">The second quaternion to add.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Subtraction(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Subtracts two quaternions.
</summary>
      <param name="left">The first quaternion to subtract.</param>
      <param name="right">The second quaternion to subtract.</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_UnaryNegation(GTA.Math.Quaternion)">
      <summary>
Reverses the direction of a given quaternion.
</summary>
      <param name="quaternion">The quaternion to negate.</param>
      <returns>A quaternion facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Equality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Inequality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(GTA.Math.Quaternion)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(GTA.Math.Quaternion@,GTA.Math.Quaternion@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GTA.Math.Matrix">
      <summary>
Defines a 4x4 matrix.
</summary>
      <unmanaged>D3DXMATRIX</unmanaged>
    </member>
    <member name="F:GTA.Math.Matrix.M11">
      <summary>
Gets or sets the element of the matrix that exists in the first row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M12">
      <summary>
Gets or sets the element of the matrix that exists in the first row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M13">
      <summary>
Gets or sets the element of the matrix that exists in the first row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M14">
      <summary>
Gets or sets the element of the matrix that exists in the first row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M21">
      <summary>
Gets or sets the element of the matrix that exists in the second row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M22">
      <summary>
Gets or sets the element of the matrix that exists in the second row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M23">
      <summary>
Gets or sets the element of the matrix that exists in the second row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M24">
      <summary>
Gets or sets the element of the matrix that exists in the second row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M31">
      <summary>
Gets or sets the element of the matrix that exists in the third row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M32">
      <summary>
Gets or sets the element of the matrix that exists in the third row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M33">
      <summary>
Gets or sets the element of the matrix that exists in the third row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M34">
      <summary>
Gets or sets the element of the matrix that exists in the third row and fourth column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M41">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and first column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M42">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and second column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M43">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and third column. 
</summary>
    </member>
    <member name="F:GTA.Math.Matrix.M44">
      <summary>
Gets or sets the element of the matrix that exists in the fourth row and fourth column. 
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.Identity">
      <summary>
Gets a <see cref="T:GTA.Math.Matrix" /> that represents an identity matrix.
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.IsIdentity">
      <summary>
Gets a value indicating whether this instance is an identity matrix.
</summary>
    </member>
    <member name="P:GTA.Math.Matrix.HasInverse">
      <summary>
Gets a value indicating whether this instance has an inverse matrix.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.FromArray(System.Single[])">
      <summary>
Converts the matrix to an array of floats.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.Determinant">
      <summary>
Calculates the determinant of the matrix.
</summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Inverse">
      <summary>
Calculates the inverse of the matrix if it exists.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.TransformPoint(GTA.Math.Vector3)">
      <summary>
Apply the transformation matrix to a point in world space
</summary>
      <param name="point">The original vertex location</param>
      <returns>The vertex location transformed by the given <see cref="T:GTA.Math.Matrix" /></returns>
    </member>
    <member name="M:GTA.Math.Matrix.InverseTransformPoint(GTA.Math.Vector3)">
      <summary>
Calculates the position of a point before this transformation matrix gets applied
</summary>
      <param name="point">The transformed vertex location</param>
      <returns>The original vertex location before being transformed by the given <see cref="T:GTA.Math.Matrix" /></returns>
    </member>
    <member name="M:GTA.Math.Matrix.Add(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the sum of two matrices.
</summary>
      <param name="left">The first matrix to add.</param>
      <param name="right">The second matrix to add.</param>
      <returns>The sum of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Subtract(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the difference between two matrices.
</summary>
      <param name="left">The first matrix to subtract.</param>
      <param name="right">The second matrix to subtract.</param>
      <returns>The difference between the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the product of two matrices.
</summary>
      <param name="left">The first matrix to multiply.</param>
      <param name="right">The second matrix to multiply.</param>
      <returns>The product of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by the given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Determines the quotient of two matrices.
</summary>
      <param name="left">The first matrix to divide.</param>
      <param name="right">The second matrix to divide.</param>
      <returns>The quotient of the two matrices.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by the given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Negate(GTA.Math.Matrix)">
      <summary>
Negates a matrix.
</summary>
      <param name="matrix">The matrix to be negated.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Inverse(GTA.Math.Matrix)">
      <summary>
Calculates the inverse of a matrix if it exists.
</summary>
      <returns>The inverse of the matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Lerp(GTA.Math.Matrix,GTA.Math.Matrix,System.Single)">
      <summary>
Performs a linear interpolation between two matricies.
</summary>
      <param name="start">Start matrix.</param>
      <param name="end">End matrix.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two matrices.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Matrix.RotationX(System.Single)">
      <summary>
Creates a matrix that rotates around the x-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationY(System.Single)">
      <summary>
Creates a matrix that rotates around the y-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationZ(System.Single)">
      <summary>
Creates a matrix that rotates around the z-axis.
</summary>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationAxis(GTA.Math.Vector3,System.Single)">
      <summary>
Creates a matrix that rotates around an arbitary axis.
</summary>
      <param name="axis">The axis around which to rotate.</param>
      <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationQuaternion(GTA.Math.Quaternion)">
      <summary>
Creates a rotation matrix from a quaternion.
</summary>
      <param name="rotation">The quaternion to use to build the matrix.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>
Creates a rotation matrix with a specified yaw, pitch, and roll.
</summary>
      <param name="yaw">Yaw around the y-axis, in radians.</param>
      <param name="pitch">Pitch around the x-axis, in radians.</param>
      <param name="roll">Roll around the z-axis, in radians.</param>
      <returns>The created rotation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Scaling(System.Single,System.Single,System.Single)">
      <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
      <param name="x">Scaling factor that is applied along the x-axis.</param>
      <param name="y">Scaling factor that is applied along the y-axis.</param>
      <param name="z">Scaling factor that is applied along the z-axis.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Scaling(GTA.Math.Vector3)">
      <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
      <param name="scale">Scaling factor for all three axes.</param>
      <returns>The created scaling matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Translation(System.Single,System.Single,System.Single)">
      <summary>
Creates a translation matrix using the specified offsets.
</summary>
      <param name="x">X-coordinate offset.</param>
      <param name="y">Y-coordinate offset.</param>
      <param name="z">Z-coordinate offset.</param>
      <returns>The created translation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Translation(GTA.Math.Vector3)">
      <summary>
Creates a translation matrix using the specified offsets.
</summary>
      <param name="amount">The offset for all three coordinate planes.</param>
      <returns>The created translation matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Transpose(GTA.Math.Matrix)">
      <summary>
Calculates the transpose of the specified matrix.
</summary>
      <param name="matrix">The matrix whose transpose is to be calculated.</param>
      <returns>The transpose of the specified matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_UnaryNegation(GTA.Math.Matrix)">
      <summary>
Negates a matrix.
</summary>
      <param name="matrix">The matrix to negate.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Addition(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Adds two matricies.
</summary>
      <param name="left">The first matrix to add.</param>
      <param name="right">The second matrix to add.</param>
      <returns>The sum of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Subtraction(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Subtracts two matricies.
</summary>
      <param name="left">The first matrix to subtract.</param>
      <param name="right">The second matrix to subtract.</param>
      <returns>The difference between the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Divides two matricies.
</summary>
      <param name="left">The first matrix to divide.</param>
      <param name="right">The second matrix to divide.</param>
      <returns>The quotient of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Multiplies two matricies.
</summary>
      <param name="left">The first matrix to multiply.</param>
      <param name="right">The second matrix to multiply.</param>
      <returns>The product of the two matricies.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,System.Single)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="left">The matrix to scale.</param>
      <param name="right">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Multiply(System.Single,GTA.Math.Matrix)">
      <summary>
Scales a matrix by a given value.
</summary>
      <param name="right">The matrix to scale.</param>
      <param name="left">The amount by which to scale.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Equality(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.op_Inequality(GTA.Math.Matrix,GTA.Math.Matrix)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.ToArray">
      <summary>
Converts the matrix to an array of floats.
</summary>
    </member>
    <member name="M:GTA.Math.Matrix.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix@,GTA.Math.Matrix@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Vector3.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Z">
      <summary>
Gets or sets the Z component of the vector.
</summary>
      <value>The Z component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector3" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
      <param name="z">Initial value for the Z component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector3.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.Zero">
      <summary>
Returns a null vector. (0,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldUp">
      <summary>
Returns the world Up vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldDown">
      <summary>
Returns the world Down vector. (0,0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldNorth">
      <summary>
Returns the world North vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldSouth">
      <summary>
Returns the world South vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldEast">
      <summary>
Returns the world East vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldWest">
      <summary>
Returns the world West vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeRight">
      <summary>
Returns the relative Right vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeLeft">
      <summary>
Returns the relative Left vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeFront">
      <summary>
Returns the relative Front vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBack">
      <summary>
Returns the relative Back vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeTop">
      <summary>
Returns the relative Top vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBottom">
      <summary>
Returns the relative Bottom vector as used. (0,0,-1)
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo2D(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared2D(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Angle(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.SignedAngle(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Around(System.Single)">
      <summary>
Creates a random vector inside the circle around this position.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXYZ">
      <summary>
Returns a new normalized vector with random X, Y and Z components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Add(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Subtract(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Modulate(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Divide(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Negate(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Clamp(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Lerp(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize(GTA.Math.Vector3)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Dot(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Cross(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the cross product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The cross product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Project(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto another vector.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="onNormal">Vector to project onto, does not assume it is normalized.</param>
      <returns>The projected vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ProjectOnPlane(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto a plane defined by a normal orthogonal to the plane.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="planeNormal">Normal of the plane,  does not assume it is normalized.</param>
      <returns>The Projection of vector onto plane.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Reflect(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The vector to project onto the plane.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Minimize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Maximize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Addition(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Subtraction(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_UnaryNegation(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(System.Single,GTA.Math.Vector3)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Division(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Equality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Inequality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3@,GTA.Math.Vector3@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Quaternion.X">
      <summary>
Gets or sets the X component of the quaternion.
</summary>
      <value>The X component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.Y">
      <summary>
Gets or sets the Y component of the quaternion.
</summary>
      <value>The Y component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.Z">
      <summary>
Gets or sets the Z component of the quaternion.
</summary>
      <value>The Z component of the quaternion.</value>
    </member>
    <member name="F:GTA.Math.Quaternion.W">
      <summary>
Gets or sets the W component of the quaternion.
</summary>
      <value>The W component of the quaternion.</value>
    </member>
    <member name="M:GTA.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Quaternion" /> structure.
</summary>
      <param name="x">The X component of the quaternion.</param>
      <param name="y">The Y component of the quaternion.</param>
      <param name="z">The Z component of the quaternion.</param>
      <param name="w">The W component of the quaternion.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.#ctor(GTA.Math.Vector3,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Quaternion" /> structure.
</summary>
      <param name="value">A <see cref="T:GTA.Math.Vector3" /> containing the first three values of the quaternion.</param>
      <param name="w">The W component of the quaternion.</param>
    </member>
    <member name="P:GTA.Math.Quaternion.Identity">
      <summary>
Gets the identity <see cref="T:GTA.Math.Quaternion" /> (0, 0, 0, 1).
</summary>
    </member>
    <member name="P:GTA.Math.Quaternion.Axis">
      <summary>
Gets the axis components of the quaternion.
</summary>
    </member>
    <member name="P:GTA.Math.Quaternion.Angle">
      <summary>
Gets the angle of the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Length">
      <summary>
Calculates the length of the quaternion.
</summary>
      <returns>The length of the quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.LengthSquared">
      <summary>
Calculates the squared length of the quaternion.
</summary>
      <returns>The squared length of the quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Normalize">
      <summary>
Converts the quaternion into a unit quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Conjugate">
      <summary>
Conjugates the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Invert">
      <summary>
Conjugates and renormalizes the quaternion.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.Add(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Adds two quaternions.
</summary>
      <param name="left">The first quaternion to add.</param>
      <param name="right">The second quaternion to add.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Divide(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Divides a quaternion by another.
</summary>
      <param name="left">The first quaternion to divide.</param>
      <param name="right">The second quaternion to divide.</param>
      <returns>The divided quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Dot(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Calculates the dot product of two quaternions.
</summary>
      <param name="left">First source quaternion.</param>
      <param name="right">Second source quaternion.</param>
      <returns>The dot product of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Invert(GTA.Math.Quaternion)">
      <summary>
Conjugates and renormalizes the quaternion.
</summary>
      <param name="quaternion">The quaternion to conjugate and renormalize.</param>
      <returns>The conjugated and renormalized quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Lerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Performs a linear interpolation between two quaternion.
</summary>
      <param name="start">Start quaternion.</param>
      <param name="end">End quaternion.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two quaternions.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Quaternion.Slerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Interpolates between two quaternions, using spherical linear interpolation..
</summary>
      <param name="start">Start quaternion.</param>
      <param name="end">End quaternion.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The spherical linear interpolation of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.SlerpUnclamped(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Interpolates between two quaternions, using spherical linear interpolation. The parameter /t/ is not clamped.
</summary>
      <param name="a" />
      <param name="b" />
      <param name="t" />
    </member>
    <member name="M:GTA.Math.Quaternion.FromToRotation(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Creates a rotation which rotates from fromDirection to toDirection.
</summary>
    </member>
    <member name="M:GTA.Math.Quaternion.RotateTowards(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
      <summary>
Rotates a rotation from towards to.
</summary>
      <param name="from">From Quaternion.</param>
      <param name="to">To Quaternion.</param>
      <param name="maxDegreesDelta" />
    </member>
    <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Modulates a quaternion by another.
</summary>
      <param name="left">The first quaternion to modulate.</param>
      <param name="right">The second quaternion to modulate.</param>
      <returns>The modulated quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,System.Single)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Negate(GTA.Math.Quaternion)">
      <summary>
Reverses the direction of a given quaternion.
</summary>
      <param name="quaternion">The quaternion to negate.</param>
      <returns>A quaternion facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Normalize(GTA.Math.Quaternion)">
      <summary>
Converts the quaternion into a unit quaternion.
</summary>
      <param name="quaternion">The quaternion to normalize.</param>
      <returns>The normalized quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.AngleBetween(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Returns the angle in degrees between two rotations a and b.
</summary>
      <param name="a">The first quaternion to calculate angle.</param>
      <param name="b">The second quaternion to calculate angle.</param>
      <returns>The angle in degrees between two rotations a and b.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Euler(System.Single,System.Single,System.Single)">
      <summary>
eturns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
</summary>
      <param name="x">X degrees.</param>
      <param name="y">Y degrees.</param>
      <param name="z">Z degrees.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.Euler(GTA.Math.Vector3)">
      <summary>
Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
</summary>
      <param name="euler">Euler angles in degrees.</param>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationAxis(GTA.Math.Vector3,System.Single)">
      <summary>
Creates a quaternion given a rotation and an axis.
</summary>
      <param name="axis">The axis of rotation.</param>
      <param name="angle">The angle of rotation.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationMatrix(GTA.Math.Matrix)">
      <summary>
Creates a quaternion given a rotation matrix.
</summary>
      <param name="matrix">The rotation matrix.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>
Creates a quaternion given a yaw, pitch, and roll value.
</summary>
      <param name="yaw">The yaw of rotation.</param>
      <param name="pitch">The pitch of rotation.</param>
      <param name="roll">The roll of rotation.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Subtract(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Subtracts two quaternions.
</summary>
      <param name="left">The first quaternion to subtract.</param>
      <param name="right">The second quaternion to subtract.</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Multiplies a quaternion by another.
</summary>
      <param name="left">The first quaternion to multiply.</param>
      <param name="right">The second quaternion to multiply.</param>
      <returns>The multiplied quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Vector3)">
      <summary>
Rotates the point with rotation.
</summary>
      <param name="rotation">The quaternion to rotate the vector.</param>
      <param name="point">The vector to be rotated.</param>
      <returns>The vector after rotation.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,System.Single)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Multiply(System.Single,GTA.Math.Quaternion)">
      <summary>
Scales a quaternion by the given value.
</summary>
      <param name="quaternion">The quaternion to scale.</param>
      <param name="scale">The amount by which to scale the quaternion.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Division(GTA.Math.Quaternion,System.Single)">
      <summary>
Divides a quaternion by another.
</summary>
      <param name="left">The first quaternion to divide.</param>
      <param name="right">The second quaternion to divide.</param>
      <returns>The divided quaternion.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Addition(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Adds two quaternions.
</summary>
      <param name="left">The first quaternion to add.</param>
      <param name="right">The second quaternion to add.</param>
      <returns>The sum of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Subtraction(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Subtracts two quaternions.
</summary>
      <param name="left">The first quaternion to subtract.</param>
      <param name="right">The second quaternion to subtract.</param>
      <returns>The difference of the two quaternions.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_UnaryNegation(GTA.Math.Quaternion)">
      <summary>
Reverses the direction of a given quaternion.
</summary>
      <param name="quaternion">The quaternion to negate.</param>
      <returns>A quaternion facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Equality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.op_Inequality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(GTA.Math.Quaternion)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Quaternion.Equals(GTA.Math.Quaternion@,GTA.Math.Quaternion@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Vector2.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector2.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector2.#ctor(System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector2" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector2.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Zero">
      <summary>
Returns a null vector. (0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Up">
      <summary>
Returns the up vector. (0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Down">
      <summary>
Returns the down vector. (0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Right">
      <summary>
Returns the right vector. (1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector2.Left">
      <summary>
Returns the left vector. (-1,0)
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceTo(GTA.Math.Vector2)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceToSquared(GTA.Math.Vector2)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The squared distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Distance(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.DistanceSquared(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Angle(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.SignedAngle(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector2.Add(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Subtract(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Multiply(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Modulate(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Divide(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Negate(GTA.Math.Vector2)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Clamp(GTA.Math.Vector2,GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Lerp(GTA.Math.Vector2,GTA.Math.Vector2,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector2.Normalize(GTA.Math.Vector2)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Dot(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Reflect(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The source vector.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector2.Minimize(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Maximize(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Addition(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Subtraction(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_UnaryNegation(GTA.Math.Vector2)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Multiply(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Multiply(System.Single,GTA.Math.Vector2)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Division(GTA.Math.Vector2,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Equality(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.op_Inequality(GTA.Math.Vector2,GTA.Math.Vector2)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(GTA.Math.Vector2)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector2.Equals(GTA.Math.Vector2@,GTA.Math.Vector2@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:GTA.Math.Vector3.X">
      <summary>
Gets or sets the X component of the vector.
</summary>
      <value>The X component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Y">
      <summary>
Gets or sets the Y component of the vector.
</summary>
      <value>The Y component of the vector.</value>
    </member>
    <member name="F:GTA.Math.Vector3.Z">
      <summary>
Gets or sets the Z component of the vector.
</summary>
      <value>The Z component of the vector.</value>
    </member>
    <member name="M:GTA.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
Initializes a new instance of the <see cref="T:GTA.Math.Vector3" /> class.
</summary>
      <param name="x">Initial value for the X component of the vector.</param>
      <param name="y">Initial value for the Y component of the vector.</param>
      <param name="z">Initial value for the Z component of the vector.</param>
    </member>
    <member name="P:GTA.Math.Vector3.Normalized">
      <summary>
Returns this vector with a magnitude of 1.
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.Zero">
      <summary>
Returns a null vector. (0,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldUp">
      <summary>
Returns the world Up vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldDown">
      <summary>
Returns the world Down vector. (0,0,-1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldNorth">
      <summary>
Returns the world North vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldSouth">
      <summary>
Returns the world South vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldEast">
      <summary>
Returns the world East vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.WorldWest">
      <summary>
Returns the world West vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeRight">
      <summary>
Returns the relative Right vector. (1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeLeft">
      <summary>
Returns the relative Left vector. (-1,0,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeFront">
      <summary>
Returns the relative Front vector. (0,1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBack">
      <summary>
Returns the relative Back vector. (0,-1,0)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeTop">
      <summary>
Returns the relative Top vector. (0,0,1)
</summary>
    </member>
    <member name="P:GTA.Math.Vector3.RelativeBottom">
      <summary>
Returns the relative Bottom vector as used. (0,0,-1)
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Length">
      <summary>
Calculates the length of the vector.
</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.LengthSquared">
      <summary>
Calculates the squared length of the vector.
</summary>
      <returns>The squared length of the vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize">
      <summary>
Converts the vector into a unit vector.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceTo2D(GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceToSquared2D(GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position">The second vector to calculate the squared distance to.</param>
      <returns>The distance to the other vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Distance2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the distance to the second vector.</param>
      <param name="position2">The second vector to calculate the distance to the first vector.</param>
      <returns>The distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.DistanceSquared2D(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the squared distance between two vectors, ignoring the Z-component.
</summary>
      <param name="position2">The first vector to calculate the squared distance to the second vector.</param>
      <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
      <returns>The squared distance between the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Angle(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the angle in degrees between from and to.
The angle returned is always the acute angle between the two vectors.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.SignedAngle(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the signed angle in degrees between from and to.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.ToHeading">
      <summary>
Converts a vector to a heading.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Around(System.Single)">
      <summary>
Creates a random vector inside the circle around this position.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXY">
      <summary>
Returns a new normalized vector with random X and Y components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.RandomXYZ">
      <summary>
Returns a new normalized vector with random X, Y and Z components.
</summary>
    </member>
    <member name="M:GTA.Math.Vector3.Add(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Subtract(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Modulate(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Modulates a vector by another.
</summary>
      <param name="left">The first vector to modulate.</param>
      <param name="right">The second vector to modulate.</param>
      <returns>The modulated vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Divide(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="value">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Negate(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Clamp(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Restricts a value to be within a specified range.
</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Lerp(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
      <summary>
Performs a linear interpolation between two vectors.
</summary>
      <param name="start">Start vector.</param>
      <param name="end">End vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
      <returns>The linear interpolation of the two vectors.</returns>
      <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Normalize(GTA.Math.Vector3)">
      <summary>
Converts the vector into a unit vector.
</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Dot(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the dot product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Cross(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Calculates the cross product of two vectors.
</summary>
      <param name="left">First source vector.</param>
      <param name="right">Second source vector.</param>
      <returns>The cross product of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Project(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto another vector.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="onNormal">Vector to project onto, does not assume it is normalized.</param>
      <returns>The projected vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ProjectOnPlane(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Projects a vector onto a plane defined by a normal orthogonal to the plane.
</summary>
      <param name="vector">The vector to project.</param>
      <param name="planeNormal">Normal of the plane,  does not assume it is normalized.</param>
      <returns>The Projection of vector onto plane.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Reflect(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
      <param name="vector">The vector to project onto the plane.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
      <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
    </member>
    <member name="M:GTA.Math.Vector3.Minimize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the smallest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Maximize(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
      <param name="value1">The first source vector.</param>
      <param name="value2">The second source vector.</param>
      <returns>A vector containing the largest components of the source vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Addition(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Adds two vectors.
</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The sum of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Subtraction(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Subtracts two vectors.
</summary>
      <param name="left">The first vector to subtract.</param>
      <param name="right">The second vector to subtract.</param>
      <returns>The difference of the two vectors.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_UnaryNegation(GTA.Math.Vector3)">
      <summary>
Reverses the direction of a given vector.
</summary>
      <param name="value">The vector to negate.</param>
      <returns>A vector facing in the opposite direction.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Multiply(System.Single,GTA.Math.Vector3)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Division(GTA.Math.Vector3,System.Single)">
      <summary>
Scales a vector by the given value.
</summary>
      <param name="vector">The vector to scale.</param>
      <param name="scale">The amount by which to scale the vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Equality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for equality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.op_Inequality(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
Tests for inequality between two objects.
</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.ToString">
      <summary>
Converts the value of the object to its equivalent string representation.
</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.GetHashCode">
      <summary>
Returns the hash code for this instance.
</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(System.Object)">
      <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3)">
      <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
      <param name="other">Object to make the comparison with.</param>
      <returns>
        <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3@,GTA.Math.Vector3@)">
      <summary>
Determines whether the specified object instances are considered equal. 
</summary>
      <param name="value1">The first value to compare.</param>
      <param name="value2">The second value to compare.</param>
      <returns>
        <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GTA.Entity.SubmersionLevel">
      <summary>
            Gets a value indicating how submersed this <see cref="T:GTA.Entity" /> is, 1.0f is that whole entity is submersed.
            </summary>
    </member>
    <member name="P:GTA.Entity.IsRecordingCollisions">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity" /> is recording collisions.
            </summary>
    </member>
    <member name="T:GTA.NaturalMotion.Message">
      <summary>
            A Base class for manually building a <see cref="T:GTA.NaturalMotion.Message" /></summary>
    </member>
    <member name="M:GTA.NaturalMotion.Message.#ctor(System.String)">
      <summary>
            Creates a class to manually build <see cref="T:GTA.NaturalMotion.Message" />s that can be sent to any <see cref="T:GTA.Ped" />.
            </summary>
      <param name="message">The name of the natual motion message</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.Abort(GTA.Ped)">
      <summary>
            Stops this Natural Motion behavious on the given <see cref="T:GTA.Ped" /></summary>
      <param name="target">The <see cref="T:GTA.Ped" /> to send the Abort <see cref="T:GTA.NaturalMotion.Message" /> to</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.SendTo(GTA.Ped)">
      <summary>
            Starts this Natural Motion behaviour on the <see cref="T:GTA.Ped" /> that will loop until manually aborted
            </summary>
      <param name="target">The <see cref="T:GTA.Ped" /> to send the <see cref="T:GTA.NaturalMotion.Message" /> to</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.SendTo(GTA.Ped,System.Int32)">
      <summary>
            Starts this Natural Motion behaviour on the <see cref="T:GTA.Ped" /> for a specified duration.
            </summary>
      <param name="target">The <see cref="T:GTA.Ped" /> to send the <see cref="T:GTA.NaturalMotion.Message" /> to</param>
      <param name="duration">How long to apply the behaviour for (-1 for looped)</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Boolean)">
      <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message" /> argument to a <see cref="T:System.Boolean" /> value
            </summary>
      <param name="argName">The argument name</param>
      <param name="value">The value to set the argument to</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Int32)">
      <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message" /> argument to a <see cref="T:System.Int32" /> value
            </summary>
      <param name="argName">The argument name</param>
      <param name="value">The value to set the argument to</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Single)">
      <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message" /> argument to a <see cref="T:System.Single" /> value
            </summary>
      <param name="argName">The argument name</param>
      <param name="value">The value to set the argument to</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.String)">
      <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message" /> argument to a <see cref="T:System.String" /> value
            </summary>
      <param name="argName">The argument name</param>
      <param name="value">The value to set the argument to</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,GTA.Math.Vector3)">
      <summary>
            Sets a <see cref="T:GTA.NaturalMotion.Message" /> argument to a <see cref="T:GTA.Math.Vector3" /> value
            </summary>
      <param name="argName">The argument name</param>
      <param name="value">The value to set the argument to</param>
    </member>
    <member name="M:GTA.NaturalMotion.Message.ResetArguments">
      <summary>
            Resets all arguments to their default value's
            </summary>
    </member>
    <member name="T:GTA.NaturalMotion.CustomHelper">
      <summary>
            A Helper class for building a <seealso cref="T:GTA.NaturalMotion.Message" /> and sending it to a given <see cref="T:GTA.Ped" /></summary>
    </member>
    <member name="M:GTA.NaturalMotion.CustomHelper.#ctor(GTA.Ped,System.String)">
      <summary>
            Creates a Helper class for building Natural Motion messages to send to a given <see cref="T:GTA.Ped" /></summary>
      <param name="target">The <see cref="T:GTA.Ped" /> that the message will be applied to</param>
      <param name="message">The name of the natual motion message</param>
    </member>
    <member name="M:GTA.NaturalMotion.CustomHelper.Start">
      <summary>
            Starts this Natural Motion behaviour on the <see cref="T:GTA.Ped" /> that will loop until manually aborted
            </summary>
    </member>
    <member name="M:GTA.NaturalMotion.CustomHelper.Start(System.Int32)">
      <summary>
            Starts this Natural Motion behaviour on the <see cref="T:GTA.Ped" /> for a specified duration.
            </summary>
      <param name="duration">How long to apply the behaviour for (-1 for looped)</param>
    </member>
    <member name="M:GTA.NaturalMotion.CustomHelper.Stop">
      <summary>
            Stops this Natural Motion behavious on the <see cref="T:GTA.Ped" /></summary>
    </member>
    <member name="P:GTA.UI.IElement.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.IElement" /> will be drawn.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.IElement.Color">
      <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.IElement" />.
            </summary>
      <value>
            The color.
            </value>
    </member>
    <member name="P:GTA.UI.IElement.Position">
      <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.IElement" />.
            </summary>
      <value>
            The position scaled on a 1280*720 pixel base.
            </value>
      <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="P:GTA.UI.IElement.Centered">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.IElement" /> should be positioned based on its center or top left corner
            </summary>
      <value>
        <c>true</c> if centered; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:GTA.UI.IElement.Draw">
      <summary>
            Draws this <see cref="T:GTA.UI.IElement" /> this frame.
            </summary>
    </member>
    <member name="M:GTA.UI.IElement.Draw(System.Drawing.SizeF)">
      <summary>
            Draws this <see cref="T:GTA.UI.IElement" /> this frame at the specified offset.
            </summary>
      <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.IElement" /> using a 1280*720 pixel base</param>
    </member>
    <member name="M:GTA.UI.IElement.ScaledDraw">
      <summary>
            Draws this <see cref="T:GTA.UI.IElement" /> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
    </member>
    <member name="M:GTA.UI.IElement.ScaledDraw(System.Drawing.SizeF)">
      <summary>
            Draws this <see cref="T:GTA.UI.IElement" /> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
      <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.IElement" /> using a <see cref="P:GTA.UI.Screen.ScaledWidth" />*720 pixel base</param>
    </member>
    <member name="P:GTA.UI.Rectangle.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Rectangle" /> will be drawn.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Rectangle.Color">
      <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.Rectangle" />.
            </summary>
      <value>
            The color.
            </value>
    </member>
    <member name="P:GTA.UI.Rectangle.Position">
      <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.Rectangle" />.
            </summary>
      <value>
            The position scaled on a 1280*720 pixel base.
            </value>
      <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="P:GTA.UI.Rectangle.Centered">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Rectangle" /> should be positioned based on its center or top left corner
            </summary>
      <value>
        <c>true</c> if centered; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Rectangle.Size">
      <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.Rectangle" /></summary>
      <value>
            The size on a 1280*720 pixel base
            </value>
      <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="M:GTA.UI.Rectangle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Rectangle" /> class used for grouping drawing Rectangles on screen.
            </summary>
    </member>
    <member name="M:GTA.UI.Rectangle.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Rectangle" /> class used for grouping drawing Rectangles on screen.
            </summary>
      <param name="position">Set the <see cref="P:GTA.UI.Rectangle.Position" /> on screen where to draw the <see cref="T:GTA.UI.Rectangle" /></param>
      <param name="size">Set the <see cref="P:GTA.UI.Rectangle.Size" /> of the <see cref="T:GTA.UI.Container" /></param>
    </member>
    <member name="M:GTA.UI.Rectangle.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Rectangle" /> class used for grouping drawing Rectangles on screen.
            </summary>
      <param name="position">Set the <see cref="P:GTA.UI.Rectangle.Position" /> on screen where to draw the <see cref="T:GTA.UI.Rectangle" /></param>
      <param name="size">Set the <see cref="P:GTA.UI.Rectangle.Size" /> of the <see cref="T:GTA.UI.Container" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.Rectangle.Color" /> used to draw the <see cref="T:GTA.UI.Container" /></param>
    </member>
    <member name="M:GTA.UI.Rectangle.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Rectangle" /> class used for grouping drawing Rectangles on screen.
            </summary>
      <param name="position">Set the <see cref="P:GTA.UI.Rectangle.Position" /> on screen where to draw the <see cref="T:GTA.UI.Rectangle" /></param>
      <param name="size">Set the <see cref="P:GTA.UI.Rectangle.Size" /> of the <see cref="T:GTA.UI.Container" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.Rectangle.Color" /> used to draw the <see cref="T:GTA.UI.Container" /></param>
      <param name="centered">Position the <see cref="T:GTA.UI.Rectangle" /> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.Rectangle.Centered" /></param>
    </member>
    <member name="M:GTA.UI.Rectangle.Draw">
      <summary>
            Draws this <see cref="T:GTA.UI.Rectangle" /> this frame.
            </summary>
    </member>
    <member name="M:GTA.UI.Rectangle.Draw(System.Drawing.SizeF)">
      <summary>
            Draws this <see cref="T:GTA.UI.Rectangle" /> this frame at the specified offset.
            </summary>
      <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.Rectangle" /> using a 1280*720 pixel base</param>
    </member>
    <member name="M:GTA.UI.Rectangle.ScaledDraw">
      <summary>
            Draws this <see cref="T:GTA.UI.Rectangle" /> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
    </member>
    <member name="M:GTA.UI.Rectangle.ScaledDraw(System.Drawing.SizeF)">
      <summary>
            Draws this <see cref="T:GTA.UI.Rectangle" /> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
      <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.Rectangle" /> using a <see cref="P:GTA.UI.Screen.ScaledWidth" />*720 pixel base</param>
    </member>
    <member name="P:GTA.UI.Container.Items">
      <summary>
            The <see cref="T:GTA.UI.IElement" />s Contained inside this <see cref="T:GTA.UI.Container" /></summary>
    </member>
    <member name="M:GTA.UI.Container.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Container" /> class used for grouping <see cref="T:GTA.UI.IElement" />s together.
            </summary>
    </member>
    <member name="M:GTA.UI.Container.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Container" /> class used for grouping <see cref="T:GTA.UI.IElement" />s together.
            </summary>
      <param name="position">Set the <see cref="P:GTA.UI.Rectangle.Position" /> on screen where to draw the <see cref="T:GTA.UI.Container" /></param>
      <param name="size">Set the <see cref="P:GTA.UI.Rectangle.Size" /> of the <see cref="T:GTA.UI.Container" /></param>
    </member>
    <member name="M:GTA.UI.Container.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Container" /> class used for grouping <see cref="T:GTA.UI.IElement" />s together.
            </summary>
      <param name="position">Set the <see cref="P:GTA.UI.Rectangle.Position" /> on screen where to draw the <see cref="T:GTA.UI.Container" /></param>
      <param name="size">Set the <see cref="P:GTA.UI.Rectangle.Size" /> of the <see cref="T:GTA.UI.Container" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.Rectangle.Color" /> used to draw the <see cref="T:GTA.UI.Container" /></param>
    </member>
    <member name="M:GTA.UI.Container.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Container" /> class used for grouping <see cref="T:GTA.UI.IElement" />s together.
            </summary>
      <param name="position">Set the <see cref="P:GTA.UI.Rectangle.Position" /> on screen where to draw the <see cref="T:GTA.UI.Container" /></param>
      <param name="size">Set the <see cref="P:GTA.UI.Rectangle.Size" /> of the <see cref="T:GTA.UI.Container" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.Rectangle.Color" /> used to draw the <see cref="T:GTA.UI.Container" /></param>
      <param name="centered">Position the <see cref="T:GTA.UI.Container" /> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.Rectangle.Centered" /></param>
    </member>
    <member name="M:GTA.UI.Container.Draw">
      <summary>
            Draws this <see cref="T:GTA.UI.Container" /> this frame and all its <see cref="T:GTA.UI.IElement" />s.
            </summary>
    </member>
    <member name="M:GTA.UI.Container.Draw(System.Drawing.SizeF)">
      <summary>
            Draws this <see cref="T:GTA.UI.Container" /> this frame and all its <see cref="T:GTA.UI.IElement" />s at the specified offset.
            </summary>
      <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.Rectangle" /> using a 1280*720 pixel base</param>
    </member>
    <member name="M:GTA.UI.Container.ScaledDraw">
      <summary>
            Draws this <see cref="T:GTA.UI.Container" /> this frame and all its <see cref="T:GTA.UI.IElement" />s using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
    </member>
    <member name="M:GTA.UI.Container.ScaledDraw(System.Drawing.SizeF)">
      <summary>
            Draws this <see cref="T:GTA.UI.Container" /> this frame and all its <see cref="T:GTA.UI.IElement" />s at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
      <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.Container" /> using a <see cref="P:GTA.UI.Screen.ScaledWidth" />*720 pixel base</param>
    </member>
    <member name="M:GTA.UI.Notification.Hide">
      <summary>
            Hides this <see cref="T:GTA.UI.Notification" /> instantly
            </summary>
    </member>
    <member name="F:GTA.UI.Screen.Width">
      <summary>
            The base width of the screen used for all UI Calculations, unless ScaledDraw is used
            </summary>
    </member>
    <member name="F:GTA.UI.Screen.Height">
      <summary>
            The base height of the screen used for all UI Calculations
            </summary>
    </member>
    <member name="P:GTA.UI.Screen.AspectRatio">
      <summary>
            Gets the current Screen Aspect Ratio
            </summary>
    </member>
    <member name="P:GTA.UI.Screen.ScaledWidth">
      <summary>
            Gets the width of the scaled against a 720pixel height base.
            </summary>
    </member>
    <member name="P:GTA.UI.Screen.Resolution">
      <summary>
            Gets the actual Screen resolution the game is being rendered at
            </summary>
    </member>
    <member name="M:GTA.UI.Screen.ShowSubtitle(System.String,System.Int32)">
      <summary>
            Shows a subtitle at the bottom of the screen for a given time
            </summary>
      <param name="message">The message to display.</param>
      <param name="duration">The duration to display the subtitle in milliseconds.</param>
    </member>
    <member name="M:GTA.UI.Screen.DisplayHelpTextThisFrame(System.String)">
      <summary>
            Displays a help message in the top corner of the screen this frame.
            </summary>
      <param name="helpText">The text to display.</param>
    </member>
    <member name="M:GTA.UI.Screen.ShowNotification(System.String,System.Boolean)">
      <summary>
            Creates a <see cref="T:GTA.UI.Notification" /> above the minimap with the given message.
            </summary>
      <param name="message">The message in the notification</param>
      <param name="blinking">if set to <c>true</c> the notification will blink</param>
      <returns>The handle of the <see cref="T:GTA.UI.Notification" /> which can be used to hide it using <see cref="M:GTA.UI.Notification.Hide" /></returns>
    </member>
    <member name="M:GTA.UI.Screen.IsHudComponentActive(GTA.UI.HudComponent)">
      <summary>
            Determines whether a given <see cref="T:GTA.UI.HudComponent" /> is Active.
            </summary>
      <param name="component">The <see cref="T:GTA.UI.HudComponent" /> to check</param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.UI.HudComponent" /> is Active; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.UI.Screen.ShowHudComponentThisFrame(GTA.UI.HudComponent)">
      <summary>
             Draws the specified <see cref="T:GTA.UI.HudComponent" /> this frame.
             </summary>
      <param name="component">The <see cref="T:GTA.UI.HudComponent" /></param>
      <remarks>This will only draw the <see cref="T:GTA.UI.HudComponent" /> if the <see cref="T:GTA.UI.HudComponent" /> can be drawn</remarks>
    </member>
    <member name="M:GTA.UI.Screen.HideHudComponentThisFrame(GTA.UI.HudComponent)">
      <summary>
            Hides the specified <see cref="T:GTA.UI.HudComponent" /> this frame.
            </summary>
      <param name="component">The <see cref="T:GTA.UI.HudComponent" /> to hide.</param>
    </member>
    <member name="M:GTA.UI.Screen.WorldToScreen(GTA.Math.Vector3,System.Boolean)">
      <summary>
            Translates a point in WorldSpace to its given Coordinates on the <see cref="T:GTA.UI.Screen" /></summary>
      <param name="position">The position in the World</param>
      <param name="scaleWidth">if set to <c>true</c> Returns the screen position scaled by <see cref="P:GTA.UI.Screen.ScaledWidth" />; otherwise, returns the screen position scaled by <see cref="F:GTA.UI.Screen.Width" /></param>
      <returns />
    </member>
    <member name="P:GTA.UI.Screen.IsFadedIn">
      <summary>
            Gets a value indicating whether the screen is faded in.
            </summary>
      <value>
        <c>true</c> if the screen is faded in; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Screen.IsFadedOut">
      <summary>
            Gets a value indicating whether the screen is faded out.
            </summary>
      <value>
        <c>true</c> if the screen is faded out; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Screen.IsFadingIn">
      <summary>
            Gets a value indicating whether the screen is fading in.
            </summary>
      <value>
        <c>true</c> if the screen is fading in; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Screen.IsFadingOut">
      <summary>
            Gets a value indicating whether the screen is fading out.
            </summary>
      <value>
        <c>true</c> if the screen is fading out; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:GTA.UI.Screen.FadeIn(System.Int32)">
      <summary>
            Fades the screen in over a specific time, useful for transitioning
            </summary>
      <param name="time">The time for the fade in to take</param>
    </member>
    <member name="M:GTA.UI.Screen.FadeOut(System.Int32)">
      <summary>
            Fades the screen out over a specific time, useful for transitioning
            </summary>
      <param name="time">The time for the fade out to take</param>
    </member>
    <member name="P:GTA.UI.ISprite.Size">
      <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.ISprite" /></summary>
      <value>
            The size on a 1280*720 pixel base
            </value>
      <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="P:GTA.UI.ISprite.Rotation">
      <summary>
            Gets or sets the rotation to draw thie <see cref="T:GTA.UI.ISprite" />.
            </summary>
      <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
    </member>
    <member name="P:GTA.UI.Sprite.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Sprite" /> will be drawn.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Sprite.Color">
      <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.Sprite" />.
            </summary>
      <value>
            The color.
            </value>
    </member>
    <member name="P:GTA.UI.Sprite.Position">
      <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.Sprite" />.
            </summary>
      <value>
            The position scaled on a 1280*720 pixel base.
            </value>
      <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="P:GTA.UI.Sprite.Size">
      <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.Sprite" /></summary>
      <value>
            The size on a 1280*720 pixel base
            </value>
      <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="P:GTA.UI.Sprite.Rotation">
      <summary>
            Gets or sets the rotation to draw thie <see cref="T:GTA.UI.Sprite" />.
            </summary>
      <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
    </member>
    <member name="P:GTA.UI.Sprite.Centered">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Sprite" /> should be positioned based on its center or top left corner
            </summary>
      <value>
        <c>true</c> if centered; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite" /> class used for drawing in game textures on the screen.
            </summary>
      <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite" /> is stored (the *.ytd file)</param>
      <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite" /> inside the Texture dictionary</param>
      <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size" /> of the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position" /> on screen where to draw the <see cref="T:GTA.UI.Sprite" /></param>
    </member>
    <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite" /> class used for drawing in game textures on the screen.
            </summary>
      <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite" /> is stored (the *.ytd file)</param>
      <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite" /> inside the Texture dictionary</param>
      <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size" /> of the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position" /> on screen where to draw the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color" /> used to draw the <see cref="T:GTA.UI.Sprite" /></param>
    </member>
    <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite" /> class used for drawing in game textures on the screen.
            </summary>
      <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite" /> is stored (the *.ytd file)</param>
      <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite" /> inside the Texture dictionary</param>
      <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size" /> of the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position" /> on screen where to draw the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color" /> used to draw the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.Sprite.Rotation" /></param>
    </member>
    <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite" /> class used for drawing in game textures on the screen.
            </summary>
      <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite" /> is stored (the *.ytd file)</param>
      <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite" /> inside the Texture dictionary</param>
      <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size" /> of the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position" /> on screen where to draw the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color" /> used to draw the <see cref="T:GTA.UI.Sprite" /></param>
      <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.Sprite.Rotation" /></param>
      <param name="centered">Position the <see cref="T:GTA.UI.Sprite" /> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.Sprite.Centered" /></param>
    </member>
    <member name="M:GTA.UI.Sprite.Draw">
      <summary>
            Draws this <see cref="T:GTA.UI.Sprite" />.
            </summary>
    </member>
    <member name="M:GTA.UI.Sprite.Draw(System.Drawing.SizeF)">
      <summary>
            Draws the <see cref="T:GTA.UI.Sprite" /> at the specified offset.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:GTA.UI.Sprite.ScaledDraw">
      <summary>
            Draws this <see cref="T:GTA.UI.Sprite" /> using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
    </member>
    <member name="M:GTA.UI.Sprite.ScaledDraw(System.Drawing.SizeF)">
      <summary>
            Draws the <see cref="T:GTA.UI.Sprite" /> at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="P:GTA.UI.CustomSprite.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.CustomSprite" /> will be drawn.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.CustomSprite.Color">
      <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
      <value>
            The color.
            </value>
    </member>
    <member name="P:GTA.UI.CustomSprite.Position">
      <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
      <value>
            The position scaled on a 1280*720 pixel base.
            </value>
      <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="P:GTA.UI.CustomSprite.Size">
      <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.CustomSprite" /></summary>
      <value>
            The size on a 1280*720 pixel base
            </value>
      <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="P:GTA.UI.CustomSprite.Rotation">
      <summary>
            Gets or sets the rotation to draw thie <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
      <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
    </member>
    <member name="P:GTA.UI.CustomSprite.Centered">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.CustomSprite" /> should be positioned based on its center or top left corner
            </summary>
      <value>
        <c>true</c> if centered; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite" /> class used for drawing external textures on the screen.
            </summary>
      <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite" /> on the disc</param>
      <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size" /> of the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position" /> on screen where to draw the <see cref="T:GTA.UI.CustomSprite" /></param>
      <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesnt exist</exception>
    </member>
    <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite" /> class used for drawing external textures on the screen.
            </summary>
      <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite" /> on the disc</param>
      <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size" /> of the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position" /> on screen where to draw the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color" /> used to draw the <see cref="T:GTA.UI.CustomSprite" /></param>
      <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesnt exist</exception>
    </member>
    <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite" /> class used for drawing external textures on the screen.
            </summary>
      <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite" /> on the disc</param>
      <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size" /> of the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position" /> on screen where to draw the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color" /> used to draw the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.CustomSprite.Rotation" /></param>
      <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesnt exist</exception>
    </member>
    <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite" /> class used for drawing external textures on the screen.
            </summary>
      <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite" /> on the disc</param>
      <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size" /> of the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position" /> on screen where to draw the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color" /> used to draw the <see cref="T:GTA.UI.CustomSprite" /></param>
      <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.CustomSprite.Rotation" /></param>
      <param name="centered">Position the <see cref="T:GTA.UI.CustomSprite" /> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.CustomSprite.Centered" /></param>
      <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesnt exist</exception>
    </member>
    <member name="M:GTA.UI.CustomSprite.Draw">
      <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
    </member>
    <member name="M:GTA.UI.CustomSprite.Draw(System.Drawing.SizeF)">
      <summary>
            Draws the <see cref="T:GTA.UI.CustomSprite" /> at the specified offset.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:GTA.UI.CustomSprite.ScaledDraw">
      <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite" /> using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
    </member>
    <member name="M:GTA.UI.CustomSprite.ScaledDraw(System.Drawing.SizeF)">
      <summary>
            Draws the <see cref="T:GTA.UI.CustomSprite" /> at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="P:GTA.UI.Text.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Text" /> will be drawn.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Text.Color">
      <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.Text" />.
            </summary>
      <value>
            The color.
            </value>
    </member>
    <member name="P:GTA.UI.Text.Position">
      <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.Text" />.
            </summary>
      <value>
            The position scaled on a 1280*720 pixel base.
            </value>
      <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
    </member>
    <member name="P:GTA.UI.Text.Scale">
      <summary>
            Gets or sets the scale of this <see cref="T:GTA.UI.Text" />.
            </summary>
      <value>
            The scale usually a value between ~0.5 and 3.0, Default = 1.0
            </value>
    </member>
    <member name="P:GTA.UI.Text.Font">
      <summary>
            Gets or sets the font of this <see cref="T:GTA.UI.Text" />.
            </summary>
      <value>
            The GTA Font use when drawing.
            </value>
    </member>
    <member name="P:GTA.UI.Text.Caption">
      <summary>
            Gets or sets the text to draw in this <see cref="T:GTA.UI.Text" />.
            </summary>
      <value>
            The caption.
            </value>
    </member>
    <member name="P:GTA.UI.Text.Alignment">
      <summary>
            Gets or sets the alignment of this <see cref="T:GTA.UI.Text" />.
            </summary>
      <value>
            The alignment:<c>Left</c>, <c>Center</c>, <c>Right</c> Justify
            </value>
    </member>
    <member name="P:GTA.UI.Text.Shadow">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Text" /> is drawn with a shadow effect.
            </summary>
      <value>
        <c>true</c> if shadow; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Text.Outline">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Text" /> is drawn with an outline.
            </summary>
      <value>
        <c>true</c> if outline; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Text.WrapWidth">
      <summary>
            Gets or sets the maximun size of the <see cref="T:GTA.UI.Text" /> before it wraps to a new line.
            </summary>
      <value>
            The width of the <see cref="T:GTA.UI.Text" />.
            </value>
    </member>
    <member name="P:GTA.UI.Text.Centered">
      <summary>
            Gets or sets a value indicating whether the alignment of this <see cref="T:GTA.UI.Text" /> is centered.
            See <see cref="P:GTA.UI.Text.Alignment" /></summary>
      <value>
        <c>true</c> if centered; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.UI.Text.Width">
      <summary>
            Measures how many pixels in the horizontal axis this <see cref="T:GTA.UI.Text" /> will use when drawn	against a 1280 pixel base
            </summary>
    </member>
    <member name="P:GTA.UI.Text.ScaledWidth">
      <summary>
            Measures how many pixels in the horizontal axis this <see cref="T:GTA.UI.Text" /> will use when drawn against a <see cref="P:GTA.UI.Text.ScaledWidth" /> pixel base
            </summary>
    </member>
    <member name="M:GTA.UI.Text.#ctor(System.String,System.Drawing.PointF,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Text" /> class used for drawing text on the screen.
            </summary>
      <param name="caption">The <see cref="T:GTA.UI.Text" /> to draw</param>
      <param name="position">Set the <see cref="P:GTA.UI.Text.Position" /> on screen where to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="scale">Sets a <see cref="P:GTA.UI.Text.Scale" /> used to increase of decrease the size of the <see cref="T:GTA.UI.Text" />, for no scaling use 1.0f</param>
    </member>
    <member name="M:GTA.UI.Text.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Text" /> class used for drawing text on the screen.
            </summary>
      <param name="caption">The <see cref="T:GTA.UI.Text" /> to draw</param>
      <param name="position">Set the <see cref="P:GTA.UI.Text.Position" /> on screen where to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="scale">Sets a <see cref="P:GTA.UI.Text.Scale" /> used to increase of decrease the size of the <see cref="T:GTA.UI.Text" />, for no scaling use 1.0f</param>
      <param name="color">Set the <see cref="P:GTA.UI.Text.Color" /> used to draw the <see cref="T:GTA.UI.Text" /></param>
    </member>
    <member name="M:GTA.UI.Text.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Text" /> class used for drawing text on the screen.
            </summary>
      <param name="caption">The <see cref="T:GTA.UI.Text" /> to draw</param>
      <param name="position">Set the <see cref="P:GTA.UI.Text.Position" /> on screen where to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="scale">Sets a <see cref="P:GTA.UI.Text.Scale" /> used to increase of decrease the size of the <see cref="T:GTA.UI.Text" />, for no scaling use 1.0f</param>
      <param name="color">Set the <see cref="P:GTA.UI.Text.Color" /> used to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="font">Sets the <see cref="P:GTA.UI.Text.Font" /> used when drawing the text</param>
    </member>
    <member name="M:GTA.UI.Text.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Text" /> class used for drawing text on the screen.
            </summary>
      <param name="caption">The <see cref="T:GTA.UI.Text" /> to draw</param>
      <param name="position">Set the <see cref="P:GTA.UI.Text.Position" /> on screen where to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="scale">Sets a <see cref="P:GTA.UI.Text.Scale" /> used to increase of decrease the size of the <see cref="T:GTA.UI.Text" />, for no scaling use 1.0f</param>
      <param name="color">Set the <see cref="P:GTA.UI.Text.Color" /> used to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="font">Sets the <see cref="P:GTA.UI.Text.Font" /> used when drawing the text</param>
      <param name="alignment">Sets the <see cref="P:GTA.UI.Text.Alignment" /> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left" />,<see cref="F:GTA.UI.Alignment.Center" /> or <see cref="F:GTA.UI.Alignment.Right" /></param>
    </member>
    <member name="M:GTA.UI.Text.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Text" /> class used for drawing text on the screen.
            </summary>
      <param name="caption">The <see cref="T:GTA.UI.Text" /> to draw</param>
      <param name="position">Set the <see cref="P:GTA.UI.Text.Position" /> on screen where to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="scale">Sets a <see cref="P:GTA.UI.Text.Scale" /> used to increase of decrease the size of the <see cref="T:GTA.UI.Text" />, for no scaling use 1.0f</param>
      <param name="color">Set the <see cref="P:GTA.UI.Text.Color" /> used to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="font">Sets the <see cref="P:GTA.UI.Text.Font" /> used when drawing the text</param>
      <param name="alignment">Sets the <see cref="P:GTA.UI.Text.Alignment" /> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left" />,<see cref="F:GTA.UI.Alignment.Center" /> or <see cref="F:GTA.UI.Alignment.Right" /></param>
      <param name="shadow">Sets whether or not to draw the <see cref="T:GTA.UI.Text" /> with a <see cref="P:GTA.UI.Text.Shadow" /> effect</param>
      <param name="outline">Sets whether or not to draw the <see cref="T:GTA.UI.Text" /> with an <see cref="P:GTA.UI.Text.Outline" /> around the letters</param>
    </member>
    <member name="M:GTA.UI.Text.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment,System.Boolean,System.Boolean,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Text" /> class used for drawing text on the screen.
            </summary>
      <param name="caption">The <see cref="T:GTA.UI.Text" /> to draw</param>
      <param name="position">Set the <see cref="P:GTA.UI.Text.Position" /> on screen where to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="scale">Sets a <see cref="P:GTA.UI.Text.Scale" /> used to increase of decrease the size of the <see cref="T:GTA.UI.Text" />, for no scaling use 1.0f</param>
      <param name="color">Set the <see cref="P:GTA.UI.Text.Color" /> used to draw the <see cref="T:GTA.UI.Text" /></param>
      <param name="font">Sets the <see cref="P:GTA.UI.Text.Font" /> used when drawing the text</param>
      <param name="alignment">Sets the <see cref="P:GTA.UI.Text.Alignment" /> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left" />,<see cref="F:GTA.UI.Alignment.Center" /> or <see cref="F:GTA.UI.Alignment.Right" /></param>
      <param name="shadow">Sets whether or not to draw the <see cref="T:GTA.UI.Text" /> with a <see cref="P:GTA.UI.Text.Shadow" /> effect</param>
      <param name="outline">Sets whether or not to draw the <see cref="T:GTA.UI.Text" /> with an <see cref="P:GTA.UI.Text.Outline" /> around the letters</param>
      <param name="wrapWidth">Sets how many horizontal pixel to draw before wrapping the <see cref="T:GTA.UI.Text" /> on the next line down</param>
    </member>
    <member name="M:GTA.UI.Text.GetStringWidth(System.String,GTA.UI.Font,System.Single)">
      <summary>
            Measures how many pixels in the horizontal axis the string will use when drawn
            </summary>
      <param name="text">The string of text to measure.</param>
      <param name="font">The <see cref="T:GTA.UI.Font" /> of the textu to measure.</param>
      <param name="scale">Sets a sclae value for increasing or decreasing the size of the text, default value 1.0f - no scaling</param>
      <returns>
            The amount of pixels scaled on a 1280 pixel width base
            </returns>
    </member>
    <member name="M:GTA.UI.Text.GetScaledStringWidth(System.String,GTA.UI.Font,System.Single)">
      <summary>
            Measures how many pixels in the horizontal axis the string will use when drawn
            </summary>
      <param name="text">The string of text to measure.</param>
      <param name="font">The <see cref="T:GTA.UI.Font" /> of the textu to measure.</param>
      <param name="scale">Sets a sclae value for increasing or decreasing the size of the text, default value 1.0f - no scaling</param>
      <returns>
            The amount of pixels scaled by the pixel width base return in <see cref="P:GTA.UI.Screen.ScaledWidth" /></returns>
    </member>
    <member name="M:GTA.UI.Text.Draw">
      <summary>
            Draws the <see cref="T:GTA.UI.Text" /> this frame.
            </summary>
    </member>
    <member name="M:GTA.UI.Text.Draw(System.Drawing.SizeF)">
      <summary>
            Draws the <see cref="T:GTA.UI.Text" /> this frame at the specified offset.
            </summary>
      <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.Text" /> using a 1280*720 pixel base</param>
    </member>
    <member name="M:GTA.UI.Text.ScaledDraw">
      <summary>
            Draws the <see cref="T:GTA.UI.Text" /> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
    </member>
    <member name="M:GTA.UI.Text.ScaledDraw(System.Drawing.SizeF)">
      <summary>
            Draws the <see cref="T:GTA.UI.Text" /> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
      <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.Text" /> using a <see cref="P:GTA.UI.Screen.ScaledWidth" />*720 pixel base</param>
    </member>
    <member name="P:GTA.Game.Version">
      <summary>
            Gets the current GameVersion.
            </summary>
    </member>
    <member name="P:GTA.Game.Language">
      <summary>
            Gets the game Language.
            </summary>
    </member>
    <member name="P:GTA.Game.GameTime">
      <summary>
            Gets how many milliseconds the game has been open in this session
            </summary>
    </member>
    <member name="P:GTA.Game.TimeScale">
      <summary>
            Sets the time scale of the Game.
            </summary>
      <value>
            The Time Scale, only accepts values in range 0.0f to 1.0f
            </value>
    </member>
    <member name="P:GTA.Game.FPS">
      <summary>
            returns the instantaneous Frames per Second
            </summary>
    </member>
    <member name="P:GTA.Game.LastFrameTime">
      <summary>
            Gets how long(in seconds) the last frame was displayed before the next was rendered
            </summary>
    </member>
    <member name="P:GTA.Game.MaxWantedLevel">
      <summary>
            Gets or sets the maximum wanted level a <see cref="T:GTA.Player" /> can receive.
            </summary>
      <value>
            The maximum wanted level, only accepts values 0 to 5
            </value>
    </member>
    <member name="P:GTA.Game.WantedMultiplier">
      <summary>
            Sets the wanted level multiplier
            </summary>
      <value>
            The multiplier to apply to a players wanted level
            </value>
    </member>
    <member name="P:GTA.Game.RadarZoom">
      <summary>
            Sets how far the Minimap should be zoomed in
            </summary>
      <value>
            The Radar zoom, Accepts values from 0 to 200
            </value>
    </member>
    <member name="P:GTA.Game.ShowsPoliceBlipsOnRadar">
      <summary>
            Sets a value indicating whether Police <see cref="T:GTA.Blip" />s should be visible on the Minimap
            </summary>
    </member>
    <member name="P:GTA.Game.RadioStation">
      <summary>
            Gets or sets the radio station.
            </summary>
    </member>
    <member name="P:GTA.Game.Player">
      <summary>
            Gets the <see cref="T:GTA.Player" /> that you are controling
            </summary>
    </member>
    <member name="P:GTA.Game.PlayerPed">
      <summary>
            Gets the <see cref="T:GTA.Ped" /> that you are controling
            </summary>
    </member>
    <member name="P:GTA.Game.Nightvision">
      <summary>
            Gets or sets a value indicating whether to render the world with a night vision filter
            </summary>
    </member>
    <member name="P:GTA.Game.ThermalVision">
      <summary>
            Gets or sets a value indicating whether to render the world with a thermal vision filter
            </summary>
    </member>
    <member name="P:GTA.Game.MissionFlag">
      <summary>
            Gets or sets a value informing the Game Engine if a mission is in progress
            </summary>
      <value>
            if <c>true</c> a mission is currently active; otherwise, <c>false</c></value>
    </member>
    <member name="P:GTA.Game.IsWaypointActive">
      <summary>
            Gets a value indicating whether there is a Waypoint set
            </summary>
    </member>
    <member name="P:GTA.Game.IsPaused">
      <summary>
            Gets or sets a value indicating whether the game is paused
            </summary>
    </member>
    <member name="P:GTA.Game.IsLoading">
      <summary>
            Gets a value indicating whether there is a loading screen being displayed
            </summary>
    </member>
    <member name="P:GTA.Game.CurrentInputMode">
      <summary>
            Gets whether the last input was made with a GamePad or Keyboard and Mouse
            </summary>
    </member>
    <member name="M:GTA.Game.IsKeyPressed(System.Windows.Forms.Keys)">
      <summary>
            Gets whether a <see cref="T:System.Windows.Forms.Keys" /> is currently held down
            </summary>
      <param name="key">The key.</param>
      <returns />
    </member>
    <member name="M:GTA.Game.IsControlPressed(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> is currently pressed
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> is pressed; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsControlJustPressed(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> was just pressed this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> was just pressed this frame; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsControlJustReleased(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> was just released this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> was just released this frame; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsEnabledControlPressed(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> is Enabled this frame and is currently pressed
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> is pressed; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsEnabledControlJustPressed(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> is Enabled and was just pressed this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> was just pressed this frame; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsEnabledControlJustReleased(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> is Enabled and was just released this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> was just released this frame; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsDisabledControlPressed(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> is Disabled this frame and is currently pressed
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> is pressed; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsDisabledControlJustPressed(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> is Disabled and was just pressed this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> was just pressed this frame; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsDisabledControlJustReleased(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> is Disabled and was just released this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> was just released this frame; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.IsControlEnabled(System.Int32,GTA.Control)">
      <summary>
            Gets whether a <see cref="T:GTA.Control" /> is Enabled ot Disabled this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>
        <c>true</c> if the <see cref="T:GTA.Control" /> is Enabled; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.EnableControlThisFrame(System.Int32,GTA.Control)">
      <summary>
            Makes the Game Engine respond to the given Control this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
    </member>
    <member name="M:GTA.Game.DisableControlThisFrame(System.Int32,GTA.Control)">
      <summary>
            Makes the Game Engine ignore to the given Control this frame
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
    </member>
    <member name="M:GTA.Game.DisableAllControlsThisFrame(System.Int32)">
      <summary>
            Disables all <see cref="T:GTA.Control" />s this frame.
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
    </member>
    <member name="M:GTA.Game.EnableAllControlsThisFrame(System.Int32)">
      <summary>
            Enables all <see cref="T:GTA.Control" />s this frame.
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
    </member>
    <member name="M:GTA.Game.GetControlNormal(System.Int32,GTA.Control)">
      <summary>
            Gets an Analog value of a <see cref="T:GTA.Control" /> input between -1.0f and 1.0f
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>The normalised <see cref="T:GTA.Control" /> value</returns>
    </member>
    <member name="M:GTA.Game.GetDisabledControlNormal(System.Int32,GTA.Control)">
      <summary>
            Gets an Analog value of a Disabled <see cref="T:GTA.Control" /> input between -1.0f and 1.0f
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>The normalised <see cref="T:GTA.Control" /> value</returns>
    </member>
    <member name="M:GTA.Game.GetControlValue(System.Int32,GTA.Control)">
      <summary>
            Gets an value of a <see cref="T:GTA.Control" /> input.
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <returns>The <see cref="T:GTA.Control" /> value</returns>
    </member>
    <member name="M:GTA.Game.SetControlNormal(System.Int32,GTA.Control,System.Single)">
      <summary>
            Override a <see cref="T:GTA.Control" /> by giving it a user defined value this frame.
            </summary>
      <param name="index">The Input Method (0 = Mouse and Keyboard, 2 = GamePad)</param>
      <param name="control">The <see cref="T:GTA.Control" /></param>
      <param name="value">the value to set the control to</param>
    </member>
    <member name="M:GTA.Game.Pause(System.Boolean)">
      <summary>
            Pauses or Resumes the game
            </summary>
      <param name="value">if set to <c>true</c> Pause the game; otherwise, resume the game</param>
    </member>
    <member name="M:GTA.Game.PauseClock(System.Boolean)">
      <summary>
            Pauses or Resumes the game clock
            </summary>
      <param name="value">if set to <c>true</c> Pause the game clock; otherwise, resume the game clock</param>
    </member>
    <member name="M:GTA.Game.DoAutoSave">
      <summary>
            Performs and automative game save
            </summary>
    </member>
    <member name="M:GTA.Game.ShowSaveMenu">
      <summary>
            Shows the save menu enabling the user to perform a manual game save.
            </summary>
    </member>
    <member name="M:GTA.Game.DoesGXTEntryExist(System.String)">
      <summary>
            Determines the game language files contain a entry for the specified GXT key
            </summary>
      <param name="entry">The GXT key</param>
      <returns>
        <c>true</c> if GXT entry exists; otherwise, <c>false</c></returns>
    </member>
    <member name="M:GTA.Game.GetGXTEntry(System.String)">
      <summary>
            Returns a localised <see cref="T:System.String" /> from the games language files with a specified GXT key
            </summary>
      <param name="entry">The GXT key</param>
      <returns>The localised <see cref="T:System.String" /> if the key exists; otherwise, <see cref="F:System.String.Empty" /></returns>
    </member>
    <member name="M:GTA.Game.GenerateHash(System.String)">
      <summary>
            Calculates a Jenkins One At A Time hash from the given <see cref="T:System.String" /> which can then be used by any native function that takes a hash
            </summary>
      <param name="input">The input <see cref="T:System.String" /> to hash</param>
      <returns>The Jenkins hash of the <see cref="T:System.String" /></returns>
    </member>
    <member name="M:GTA.Game.PlaySound(System.String,System.String)">
      <summary>
            Plays a sound from the games sound files
            </summary>
      <param name="soundFile">The file the sound is stored in</param>
      <param name="soundSet">The name of the sound inside the file</param>
    </member>
    <member name="M:GTA.Game.PlayMusic(System.String)">
      <summary>
            Plays music from the games music files
            </summary>
      <param name="musicFile">The music file to play</param>
    </member>
    <member name="M:GTA.Game.StopMusic(System.String)">
      <summary>
            Stops playing a music file
            </summary>
      <param name="musicFile">The music file to stop</param>
    </member>
    <member name="M:GTA.Game.GetUserInput(System.Int32)">
      <summary>
            Creates an input box for enabling a user to input text using the keyboard
            </summary>
      <param name="maxLength">The maximum length of input allowed</param>
      <returns>The <see cref="T:System.String" /> of what the user entered, If the user cancelled <see cref="F:System.String.Empty" /> is returned</returns>
    </member>
    <member name="M:GTA.Game.GetUserInput(System.String,System.Int32)">
      <summary>
            Creates an input box for enabling a user to input text using the keyboard
            </summary>
      <param name="defaultText">The default text.</param>
      <param name="maxLength">The maximum length of input allowed</param>
      <returns>The <see cref="T:System.String" /> of what the user entered, If the user cancelled <see cref="F:System.String.Empty" /> is returned</returns>
    </member>
    <member name="M:GTA.Game.GetUserInput(GTA.WindowTitle,System.Int32)">
      <summary>
            Creates an input box for enabling a user to input text using the keyboard
            </summary>
      <param name="windowTitle">The Title of the Window.</param>
      <param name="maxLength">The maximum length of input allowed</param>
      <returns>The <see cref="T:System.String" /> of what the user entered, If the user cancelled <see cref="F:System.String.Empty" /> is returned</returns>
    </member>
    <member name="M:GTA.Game.GetUserInput(GTA.WindowTitle,System.String,System.Int32)">
      <summary>
            Creates an input box for enabling a user to input text using the keyboard
            </summary>
      <param name="windowTitle">The Title of the Window.</param>
      <param name="defaultText">The default text.</param>
      <param name="maxLength">The maximum length of input allowed</param>
      <returns>The <see cref="T:System.String" /> of what the user entered, If the user cancelled <see cref="F:System.String.Empty" /> is returned</returns>
    </member>
    <member name="P:GTA.Ped.Money">
      <summary>
            Gets or sets how much money the <see cref="T:GTA.Ped" /> is carrying.
            </summary>
    </member>
    <member name="P:GTA.Ped.Gender">
      <summary>
            Gets the gender of the <see cref="T:GTA.Ped" />.
            </summary>
    </member>
    <member name="P:GTA.Ped.MaxHealth">
      <summary>
            Gets or sets the maximum health of the <see cref="T:GTA.Ped" />.
            </summary>
    </member>
    <member name="P:GTA.Ped.Armor">
      <summary>
            Gets or sets how much Armor the <see cref="T:GTA.Ped" /> is wearing.
            </summary>
    </member>
    <member name="P:GTA.Ped.Accuracy">
      <summary>
            Gets or sets how accurate the <see cref="T:GTA.Ped" />s shooting ability is.
            </summary>
      <value>
            The accuracy from 0 to 100, 0 being very innacurate, 100 being perfectly accurate.
            </value>
    </member>
    <member name="P:GTA.Ped.Task">
      <summary>
            Opens a list of <see cref="T:GTA.Tasks" /> that the <see cref="T:GTA.Ped" /> can carry out.
            </summary>
    </member>
    <member name="P:GTA.Ped.TaskSequenceProgress">
      <summary>
            Gets the stage of the <see cref="T:GTA.TaskSequence" /> the <see cref="T:GTA.Ped" /> is currently executing.
            </summary>
    </member>
    <member name="P:GTA.Ped.Euphoria">
      <summary>
            Opens a list of <see cref="T:GTA.NaturalMotion.Euphoria" /> Helpers which can be applie to the <see cref="T:GTA.Ped" />.
            </summary>
    </member>
    <member name="P:GTA.Ped.Weapons">
      <summary>
            Gets a collection of all the <see cref="T:GTA.Ped" />s <see cref="T:GTA.Weapon" />s.
            </summary>
    </member>
    <member name="P:GTA.Ped.LastVehicle">
      <summary>
            Gets the last <see cref="T:GTA.Vehicle" /> the <see cref="T:GTA.Ped" /> used.
            </summary>
      <remarks>returns <langword>null</langword> if the Last Vehicle doesn't exist.</remarks>
    </member>
    <member name="P:GTA.Ped.CurrentVehicle">
      <summary>
            Gets the current <see cref="T:GTA.Vehicle" /> the <see cref="T:GTA.Ped" /> is using.
            </summary>
      <remarks>returns <langword>null</langword> if the <see cref="T:GTA.Ped" /> isn't in a <see cref="T:GTA.Vehicle" />.</remarks>
    </member>
    <member name="P:GTA.Ped.VehicleTryingToEnter">
      <summary>
            Gets the <see cref="T:GTA.Vehicle" /> the <see cref="T:GTA.Ped" /> is trying to enter.
            </summary>
      <remarks>returns <langword>null</langword> if the <see cref="T:GTA.Ped" /> isn't in a <see cref="T:GTA.Vehicle" />.</remarks>
    </member>
    <member name="P:GTA.Ped.PedGroup">
      <summary>
            Gets the PedGroup the <see cref="T:GTA.Ped" /> is in.
            </summary>
    </member>
    <member name="P:GTA.Ped.Sweat">
      <summary>
            Gets or sets the how much sweat should be rendered on the <see cref="T:GTA.Ped" />.
            </summary>
      <value>
            The sweat from 0 to 100, 0 being no sweat, 100 being saturated.
            </value>
    </member>
    <member name="P:GTA.Ped.WetnessHeight">
      <summary>
            Sets how high up on the <see cref="T:GTA.Ped" />s body water should be visible
            </summary>
      <value>
            The height ranges from 0.0f to 1.99f, 0.0f being no water visible, 1.99f being covered in water
            </value>
    </member>
    <member name="P:GTA.Ped.Voice">
      <summary>
            Sets the voice to use when the <see cref="T:GTA.Ped" /> speaks.
            </summary>
    </member>
    <member name="P:GTA.Ped.ShootRate">
      <summary>
            Sets the rate the <see cref="T:GTA.Ped" /> will shoot at.
            </summary>
      <value>
            The shoot rate from 0.0f to 1000.0f, 100.0f is the default value
            </value>
    </member>
    <member name="P:GTA.Ped.WasKilledByStealth">
      <summary>
            Gets a value indicating whether the <see cref="T:GTA.Ped" /> was killed by a stealth attack.
            </summary>
      <value>
        <c>true</c> if <see cref="T:GTA.Ped" /> was killed by stealth; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.Ped.WasKilledByTakedown">
      <summary>
            Gets a value indicating whether the <see cref="T:GTA.Ped" /> was killed by a takedown.
            </summary>
      <value>
        <c>true</c> if <see cref="T:GTA.Ped" /> was killed by a takedown; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.Ped.SeatIndex">
      <summary>
            Gets the <see cref="T:GTA.VehicleSeat" /> the <see cref="T:GTA.Ped" /> is in
            </summary>
      <value>
            The <see cref="T:GTA.VehicleSeat" /> the <see cref="T:GTA.Ped" /> is in if the <see cref="T:GTA.Ped" /> is in a <see cref="T:GTA.Vehicle" />; otherwise, <see cref="F:GTA.VehicleSeat.None" /></value>
    </member>
    <member name="P:GTA.Ped.IsJumpingOutOfVehicle">
      <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped" /> is jumping out of their vehicle.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:GTA.Ped" /> is jumping out of their vehicle; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.Ped.StaysInVehicleWhenJacked">
      <summary>
            Sets a value indicating whether this <see cref="T:GTA.Ped" /> will stay in the vehicle when the driver gets jacked
            </summary>
      <value>
        <c>true</c> if <see cref="T:GTA.Ped" /> stays in vehicle when jacked; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.Ped.MaxDrivingSpeed">
      <summary>
            Sets the maximum driving speed the <see cref="T:GTA.Ped" /> can drive at.
            </summary>
    </member>
    <member name="P:GTA.Ped.IsHuman">
      <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped" /> is human.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:GTA.Ped" /> is human; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.Ped.BlockPermanentEvents">
      <summary>
            Sets whether permanent events are blocked for this <see cref="T:GTA.Ped" />.
             If permanent events are blocked, this <see cref="T:GTA.Ped" /> will only do as it's told, and won't flee when shot at, etc.
            </summary>
      <value>
        <c>true</c> if permanent events are blocked; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.World.CurrentDate">
      <summary>
            Gets or sets the current date and time in the GTA World.
            </summary>
      <value>
            The current date and time.
            </value>
    </member>
    <member name="P:GTA.World.CurrentDayTime">
      <summary>
            Gets or sets the current time of day in the GTA World.
            </summary>
      <value>
            The current time of day
            </value>
    </member>
    <member name="P:GTA.World.Blackout">
      <summary>
            Sets a value indicating whether lights in the <see cref="T:GTA.World" /> should be rendered.
            </summary>
      <value>
        <c>true</c> if blackout; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:GTA.World.Weather">
      <summary>
            Gets or sets the weather.
            </summary>
      <value>
            The weather.
            </value>
    </member>
    <member name="P:GTA.World.NextWeather">
      <summary>
            Gets or sets the next weather.
            </summary>
      <value>
            The next weather.
            </value>
    </member>
    <member name="P:GTA.World.WeatherTransition">
      <summary>
            Gets or sets the weather transition.
            </summary>
      <value>
            The weather transition.
            </value>
    </member>
    <member name="M:GTA.World.TransitionToWeather(GTA.Weather,System.Single)">
      <summary>
            Transitions to weather.
            </summary>
      <param name="weather">The weather.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="P:GTA.World.GravityLevel">
      <summary>
            Sets the gravity level for all <see cref="T:GTA.World" /> objects.
            </summary>
      <value>
            The gravity level
            9.8f - Default gravity
            2.4f - Moon gravity
            0.1f - Very low gravity
            0.0f - No gravity 
            </value>
    </member>
    <member name="P:GTA.World.RenderingCamera">
      <summary>
            Gets or sets the rendering camera.
            </summary>
      <value>
            The rendering <see cref="T:GTA.Camera" />.
            </value>
      <remarks>
            Setting to <see langword="null" /> sets the rendering <see cref="T:GTA.Camera" /> to <see cref="T:GTA.GameplayCamera" /></remarks>
    </member>
    <member name="M:GTA.World.DestroyAllCameras">
      <summary>
            Destroys all user created <see cref="T:GTA.Camera" />s.
            </summary>
    </member>
    <member name="M:GTA.World.GetWaypointPosition">
      <summary>
            Gets the waypoint position.
            </summary>
      <returns>The <see cref="T:GTA.Math.Vector3" /> coordinates of the Waypoint <see cref="T:GTA.Blip" /></returns>
      <remarks>
            Returns an empty <see cref="T:GTA.Math.Vector3" /> if a waypoint <see cref="T:GTA.Blip" /> hasn't been set
            If the game engine cant extract height information the Z component will be 0.0f
            </remarks>
    </member>
    <member name="M:GTA.World.GetDistance(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
            Gets the straight line distance between 2 positions.
            </summary>
      <param name="origin">The origin.</param>
      <param name="destination">The destination.</param>
      <returns>The distance</returns>
    </member>
    <member name="M:GTA.World.CalculateTravelDistance(GTA.Math.Vector3,GTA.Math.Vector3)">
      <summary>
            Calculates the travel distance using roads and paths between 2 positions.
            </summary>
      <param name="origin">The origin.</param>
      <param name="destination">The destination.</param>
      <returns>The travel distance</returns>
    </member>
    <member name="M:GTA.World.GetGroundHeight(GTA.Math.Vector3)">
      <summary>
            Gets the height of the ground at a given position.
            </summary>
      <param name="position">The position.</param>
      <returns>The height measured in meters</returns>
    </member>
    <member name="M:GTA.World.GetGroundHeight(GTA.Math.Vector2)">
      <summary>
            Gets the height of the ground at a given position.
            </summary>
      <param name="position">The position.</param>
      <returns>The height measured in meters</returns>
    </member>
    <member name="M:GTA.World.GetAllBlips">
      <summary>
            Gets an <see langword="array" /> of all the <see cref="T:GTA.Blip" />s on the Map
            </summary>
      <returns>
        <see cref="T:GTA.Blip" />[] of all the blips</returns>
    </member>
  </members>
</doc>